package PerformanceIRPSystem;


/**
* PerformanceIRPSystem/_ThresholdOperationsStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from PerformanceIRPSystem_F.idl
* Thursday, June 21, 2018 8:22:23 AM GMT+01:00
*/


//## Subsystem: PerforIRP-1
public class _ThresholdOperationsStub extends org.omg.CORBA.portable.ObjectImpl implements PerformanceIRPSystem.ThresholdOperations
{


  //      that currently exists in the System
  public CommonIRPConstDefs.Signal list_thresholds (String[] ne_list, PerformanceIRPConstDefs.IdSeqHolder threshold_list) throws PerformanceIRPSystem.OptionalOperationNotSupportedException, PerformanceIRPSystem.OptionalParameterNotSupportedException, PerformanceIRPSystem.ProcessingErrorException, PerformanceIRPSystem.InvalidParameterException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("list_thresholds", true);
                PerformanceIRPConstDefs.NeListHelper.write ($out, ne_list);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                threshold_list.value = PerformanceIRPConstDefs.IdSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:PerformanceIRPSystem/OptionalOperationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalOperationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/OptionalParameterNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalParameterNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/ProcessingErrorException:1.0"))
                    throw PerformanceIRPSystem.ProcessingErrorExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidParameterException:1.0"))
                    throw PerformanceIRPSystem.InvalidParameterExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return list_thresholds (ne_list, threshold_list        );
            } finally {
                _releaseReply ($in);
            }
  } // list_thresholds

  public CommonIRPConstDefs.Signal create_threshold (String observation_class, String[] observed_object_list, int granularity_period, String threshold_attribute, PerformanceIRPConstDefs.AttrValue threshold_value, PerformanceIRPConstDefs.AttrValue hysteresis, PerformanceIRPConstDefs.Direction direction, String type, String perceived_severity, String probable_cause, String specific_problem, org.omg.CORBA.StringHolder threshold_data_id) throws PerformanceIRPSystem.OptionalOperationNotSupportedException, PerformanceIRPSystem.OptionalParameterNotSupportedException, PerformanceIRPSystem.ProcessingErrorException, PerformanceIRPSystem.InvalidParameterException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_threshold", true);
                $out.write_string (observation_class);
                PerformanceIRPConstDefs.InstanceListHelper.write ($out, observed_object_list);
                PerformanceIRPConstDefs.TimePeriodInSecondsHelper.write ($out, granularity_period);
                $out.write_string (threshold_attribute);
                PerformanceIRPConstDefs.AttrValueHelper.write ($out, threshold_value);
                PerformanceIRPConstDefs.AttrValueHelper.write ($out, hysteresis);
                PerformanceIRPConstDefs.DirectionHelper.write ($out, direction);
                $out.write_string (type);
                $out.write_string (perceived_severity);
                $out.write_string (probable_cause);
                $out.write_string (specific_problem);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                threshold_data_id.value = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:PerformanceIRPSystem/OptionalOperationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalOperationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/OptionalParameterNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalParameterNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/ProcessingErrorException:1.0"))
                    throw PerformanceIRPSystem.ProcessingErrorExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidParameterException:1.0"))
                    throw PerformanceIRPSystem.InvalidParameterExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return create_threshold (observation_class, observed_object_list, granularity_period, threshold_attribute, threshold_value, hysteresis, direction, type, perceived_severity, probable_cause, specific_problem, threshold_data_id        );
            } finally {
                _releaseReply ($in);
            }
  } // create_threshold


  //      identified by the threshoIdId.
  public CommonIRPConstDefs.Signal lookup_threshold (String threshold_data_id, org.omg.CORBA.StringHolder observed_object_class, PerformanceIRPConstDefs.InstanceListHolder observed_object_list, org.omg.CORBA.IntHolder granularity_period, org.omg.CORBA.StringHolder threshold_attribute, PerformanceIRPConstDefs.AttrValueHolder threshold_value, PerformanceIRPConstDefs.AttrValueHolder hysteresis, PerformanceIRPConstDefs.DirectionHolder direction, org.omg.CORBA.StringHolder type, org.omg.CORBA.StringHolder perceived_severity, org.omg.CORBA.StringHolder probable_cause, org.omg.CORBA.StringHolder specific_problem) throws PerformanceIRPSystem.NoSuchIdException, PerformanceIRPSystem.OptionalOperationNotSupportedException, PerformanceIRPSystem.OptionalParameterNotSupportedException, PerformanceIRPSystem.ProcessingErrorException, PerformanceIRPSystem.InvalidParameterException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("lookup_threshold", true);
                $out.write_string (threshold_data_id);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                observed_object_class.value = $in.read_string ();
                observed_object_list.value = PerformanceIRPConstDefs.InstanceListHelper.read ($in);
                granularity_period.value = PerformanceIRPConstDefs.TimePeriodInSecondsHelper.read ($in);
                threshold_attribute.value = $in.read_string ();
                threshold_value.value = PerformanceIRPConstDefs.AttrValueHelper.read ($in);
                hysteresis.value = PerformanceIRPConstDefs.AttrValueHelper.read ($in);
                direction.value = PerformanceIRPConstDefs.DirectionHelper.read ($in);
                type.value = $in.read_string ();
                perceived_severity.value = $in.read_string ();
                probable_cause.value = $in.read_string ();
                specific_problem.value = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:PerformanceIRPSystem/NoSuchIdException:1.0"))
                    throw PerformanceIRPSystem.NoSuchIdExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/OptionalOperationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalOperationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/OptionalParameterNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalParameterNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/ProcessingErrorException:1.0"))
                    throw PerformanceIRPSystem.ProcessingErrorExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidParameterException:1.0"))
                    throw PerformanceIRPSystem.InvalidParameterExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return lookup_threshold (threshold_data_id, observed_object_class, observed_object_list, granularity_period, threshold_attribute, threshold_value, hysteresis, direction, type, perceived_severity, probable_cause, specific_problem        );
            } finally {
                _releaseReply ($in);
            }
  } // lookup_threshold

  public CommonIRPConstDefs.Signal delete_threshold (String threshold_data_id) throws PerformanceIRPSystem.NoSuchIdException, PerformanceIRPSystem.OptionalOperationNotSupportedException, PerformanceIRPSystem.OptionalParameterNotSupportedException, PerformanceIRPSystem.ProcessingErrorException, PerformanceIRPSystem.InvalidParameterException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delete_threshold", true);
                $out.write_string (threshold_data_id);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:PerformanceIRPSystem/NoSuchIdException:1.0"))
                    throw PerformanceIRPSystem.NoSuchIdExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/OptionalOperationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalOperationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/OptionalParameterNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalParameterNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/ProcessingErrorException:1.0"))
                    throw PerformanceIRPSystem.ProcessingErrorExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidParameterException:1.0"))
                    throw PerformanceIRPSystem.InvalidParameterExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return delete_threshold (threshold_data_id        );
            } finally {
                _releaseReply ($in);
            }
  } // delete_threshold

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:PerformanceIRPSystem/ThresholdOperations:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _ThresholdOperationsStub
