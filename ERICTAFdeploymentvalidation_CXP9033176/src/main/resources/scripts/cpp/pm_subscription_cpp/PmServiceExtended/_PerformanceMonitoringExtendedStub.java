package PmServiceExtended;


/**
* PmServiceExtended/_PerformanceMonitoringExtendedStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from PerformanceMonitoringServiceExtended_F.idl
* Thursday, June 21, 2018 8:22:31 AM GMT+01:00
*/


/**
   * This interface is an extension of the Performance IRP 2:2 which is used for new additions to PMCI.
    *
    */
public class _PerformanceMonitoringExtendedStub extends org.omg.CORBA.portable.ObjectImpl implements PmServiceExtended.PerformanceMonitoringExtended
{


  /**
         * Create a generic performance monitoring report which accepts MOs that are not present
         * on the node. In all other aspects this method is identical with the method create_performance_monitoring.
         */
  public CommonIRPConstDefs.Signal create_generic_performance_monitoring (PerformanceIRPConstDefs.ObservationClass[] observation_class_list, PerformanceIRPConstDefs.ObservationObject[] observation_object_list, int granularity_period, PerformanceIRPConstDefs.Schedule schedule, int reporting_period, PerformanceIRPConstDefs.Destination destination, String measurement_name, PerformanceIRPConstDefs.PerformanceMonitoringState performance_monitoring_state, org.omg.CORBA.IntHolder performance_monitoring_id, PerformanceIRPConstDefs.FailureInformationHolder failure_information) throws PerformanceIRPSystem.OptionalOperationNotSupportedException, PerformanceIRPSystem.OptionalParameterNotSupportedException, PerformanceIRPSystem.InvalidObservationObjectListException, PerformanceIRPSystem.InvalidObservationClassException, PerformanceIRPSystem.InvalidGranularityPeriodException, PerformanceIRPSystem.InvalidParameterException, PerformanceIRPSystem.InvalidScheduleException, PerformanceIRPSystem.InvalidReportingPeriodException, PerformanceIRPSystem.DestinationNotSupportedException, PerformanceIRPSystem.ProcessingErrorException, PerformanceIRPSystem.NumberOfCountersExceededException, PerformanceIRPSystem.NumberOfMonitorsExceededException, PerformanceIRPSystem.OverloadException, PerformanceIRPSystem.GranularityNotSupportedException, PerformanceIRPSystem.GranularityAndAttributeActivationException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_generic_performance_monitoring", true);
                PerformanceIRPConstDefs.ObservationClassListHelper.write ($out, observation_class_list);
                PerformanceIRPConstDefs.ObservationObjectListHelper.write ($out, observation_object_list);
                PerformanceIRPConstDefs.TimePeriodInSecondsHelper.write ($out, granularity_period);
                PerformanceIRPConstDefs.ScheduleHelper.write ($out, schedule);
                PerformanceIRPConstDefs.TimePeriodInSecondsHelper.write ($out, reporting_period);
                PerformanceIRPConstDefs.DestinationHelper.write ($out, destination);
                PerformanceIRPConstDefs.MeasurementNameHelper.write ($out, measurement_name);
                PerformanceIRPConstDefs.PerformanceMonitoringStateHelper.write ($out, performance_monitoring_state);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                performance_monitoring_id.value = PerformanceIRPConstDefs.PerformanceMonitoringIdHelper.read ($in);
                failure_information.value = PerformanceIRPConstDefs.FailureInformationHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:PerformanceIRPSystem/OptionalOperationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalOperationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/OptionalParameterNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalParameterNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidObservationObjectListException:1.0"))
                    throw PerformanceIRPSystem.InvalidObservationObjectListExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidObservationClassException:1.0"))
                    throw PerformanceIRPSystem.InvalidObservationClassExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidGranularityPeriodException:1.0"))
                    throw PerformanceIRPSystem.InvalidGranularityPeriodExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidParameterException:1.0"))
                    throw PerformanceIRPSystem.InvalidParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidScheduleException:1.0"))
                    throw PerformanceIRPSystem.InvalidScheduleExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidReportingPeriodException:1.0"))
                    throw PerformanceIRPSystem.InvalidReportingPeriodExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/DestinationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.DestinationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/ProcessingErrorException:1.0"))
                    throw PerformanceIRPSystem.ProcessingErrorExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/NumberOfCountersExceededException:1.0"))
                    throw PerformanceIRPSystem.NumberOfCountersExceededExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/NumberOfMonitorsExceededException:1.0"))
                    throw PerformanceIRPSystem.NumberOfMonitorsExceededExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/OverloadException:1.0"))
                    throw PerformanceIRPSystem.OverloadExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/GranularityNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.GranularityNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/GranularityAndAttributeActivationException:1.0"))
                    throw PerformanceIRPSystem.GranularityAndAttributeActivationExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return create_generic_performance_monitoring (observation_class_list, observation_object_list, granularity_period, schedule, reporting_period, destination, measurement_name, performance_monitoring_state, performance_monitoring_id, failure_information        );
            } finally {
                _releaseReply ($in);
            }
  } // create_generic_performance_monitoring


  //      performance monitorings in the System.
  public CommonIRPConstDefs.Signal list_performance_monitorings (String[] ne_list, PerformanceIRPConstDefs.PerformanceMonitoringListHolder performance_monitoring_list) throws PerformanceIRPSystem.OptionalOperationNotSupportedException, PerformanceIRPSystem.OptionalParameterNotSupportedException, PerformanceIRPSystem.InvalidNetworkElement, PerformanceIRPSystem.InvalidParameterException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("list_performance_monitorings", true);
                PerformanceIRPConstDefs.NeListHelper.write ($out, ne_list);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                performance_monitoring_list.value = PerformanceIRPConstDefs.PerformanceMonitoringListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:PerformanceIRPSystem/OptionalOperationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalOperationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/OptionalParameterNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalParameterNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidNetworkElement:1.0"))
                    throw PerformanceIRPSystem.InvalidNetworkElementHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidParameterException:1.0"))
                    throw PerformanceIRPSystem.InvalidParameterExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return list_performance_monitorings (ne_list, performance_monitoring_list        );
            } finally {
                _releaseReply ($in);
            }
  } // list_performance_monitorings


  //Note: Utran shall implement the atomic behavior version.
  public CommonIRPConstDefs.Signal create_performance_monitoring (PerformanceIRPConstDefs.ObservationClass[] observation_class_list, PerformanceIRPConstDefs.ObservationObject[] observation_object_list, int granularity_period, PerformanceIRPConstDefs.Schedule schedule, int reporting_period, PerformanceIRPConstDefs.Destination destination, String measurement_name, PerformanceIRPConstDefs.PerformanceMonitoringState performance_monitoring_state, org.omg.CORBA.IntHolder performance_monitoring_id, PerformanceIRPConstDefs.FailureInformationHolder failure_information) throws PerformanceIRPSystem.OptionalOperationNotSupportedException, PerformanceIRPSystem.OptionalParameterNotSupportedException, PerformanceIRPSystem.InvalidObservationObjectListException, PerformanceIRPSystem.InvalidObservationClassException, PerformanceIRPSystem.InvalidGranularityPeriodException, PerformanceIRPSystem.InvalidParameterException, PerformanceIRPSystem.InvalidScheduleException, PerformanceIRPSystem.InvalidReportingPeriodException, PerformanceIRPSystem.DestinationNotSupportedException, PerformanceIRPSystem.ProcessingErrorException, PerformanceIRPSystem.NumberOfMonitorsExceededException, PerformanceIRPSystem.NumberOfCountersExceededException, PerformanceIRPSystem.OverloadException, PerformanceIRPSystem.GranularityNotSupportedException, PerformanceIRPSystem.GranularityAndAttributeActivationException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_performance_monitoring", true);
                PerformanceIRPConstDefs.ObservationClassListHelper.write ($out, observation_class_list);
                PerformanceIRPConstDefs.ObservationObjectListHelper.write ($out, observation_object_list);
                PerformanceIRPConstDefs.TimePeriodInSecondsHelper.write ($out, granularity_period);
                PerformanceIRPConstDefs.ScheduleHelper.write ($out, schedule);
                PerformanceIRPConstDefs.TimePeriodInSecondsHelper.write ($out, reporting_period);
                PerformanceIRPConstDefs.DestinationHelper.write ($out, destination);
                PerformanceIRPConstDefs.MeasurementNameHelper.write ($out, measurement_name);
                PerformanceIRPConstDefs.PerformanceMonitoringStateHelper.write ($out, performance_monitoring_state);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                performance_monitoring_id.value = PerformanceIRPConstDefs.PerformanceMonitoringIdHelper.read ($in);
                failure_information.value = PerformanceIRPConstDefs.FailureInformationHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:PerformanceIRPSystem/OptionalOperationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalOperationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/OptionalParameterNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalParameterNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidObservationObjectListException:1.0"))
                    throw PerformanceIRPSystem.InvalidObservationObjectListExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidObservationClassException:1.0"))
                    throw PerformanceIRPSystem.InvalidObservationClassExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidGranularityPeriodException:1.0"))
                    throw PerformanceIRPSystem.InvalidGranularityPeriodExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidParameterException:1.0"))
                    throw PerformanceIRPSystem.InvalidParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidScheduleException:1.0"))
                    throw PerformanceIRPSystem.InvalidScheduleExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidReportingPeriodException:1.0"))
                    throw PerformanceIRPSystem.InvalidReportingPeriodExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/DestinationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.DestinationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/ProcessingErrorException:1.0"))
                    throw PerformanceIRPSystem.ProcessingErrorExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/NumberOfMonitorsExceededException:1.0"))
                    throw PerformanceIRPSystem.NumberOfMonitorsExceededExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/NumberOfCountersExceededException:1.0"))
                    throw PerformanceIRPSystem.NumberOfCountersExceededExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/OverloadException:1.0"))
                    throw PerformanceIRPSystem.OverloadExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/GranularityNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.GranularityNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/GranularityAndAttributeActivationException:1.0"))
                    throw PerformanceIRPSystem.GranularityAndAttributeActivationExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return create_performance_monitoring (observation_class_list, observation_object_list, granularity_period, schedule, reporting_period, destination, measurement_name, performance_monitoring_state, performance_monitoring_id, failure_information        );
            } finally {
                _releaseReply ($in);
            }
  } // create_performance_monitoring


  //      identified by the  performance_monitoring_id.
  public CommonIRPConstDefs.Signal lookup_performance_monitoring (int performance_monitoring_id, PerformanceIRPConstDefs.ObservationClassListHolder observation_class_list, PerformanceIRPConstDefs.ObservationObjectListHolder observation_object_list, org.omg.CORBA.IntHolder granularity_period, PerformanceIRPConstDefs.ScheduleHolder schedule, org.omg.CORBA.IntHolder reporting_period, PerformanceIRPConstDefs.DestinationHolder destination, PerformanceIRPConstDefs.PerformanceMonitoringStateHolder performance_monitoring_state, org.omg.CORBA.StringHolder measurement_name) throws PerformanceIRPSystem.OptionalOperationNotSupportedException, PerformanceIRPSystem.NoSuchIdException, PerformanceIRPSystem.ProcessingErrorException, PerformanceIRPSystem.InvalidParameterException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("lookup_performance_monitoring", true);
                PerformanceIRPConstDefs.PerformanceMonitoringIdHelper.write ($out, performance_monitoring_id);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                observation_class_list.value = PerformanceIRPConstDefs.ObservationClassListHelper.read ($in);
                observation_object_list.value = PerformanceIRPConstDefs.ObservationObjectListHelper.read ($in);
                granularity_period.value = PerformanceIRPConstDefs.TimePeriodInSecondsHelper.read ($in);
                schedule.value = PerformanceIRPConstDefs.ScheduleHelper.read ($in);
                reporting_period.value = PerformanceIRPConstDefs.TimePeriodInSecondsHelper.read ($in);
                destination.value = PerformanceIRPConstDefs.DestinationHelper.read ($in);
                performance_monitoring_state.value = PerformanceIRPConstDefs.PerformanceMonitoringStateHelper.read ($in);
                measurement_name.value = PerformanceIRPConstDefs.MeasurementNameHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:PerformanceIRPSystem/OptionalOperationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalOperationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/NoSuchIdException:1.0"))
                    throw PerformanceIRPSystem.NoSuchIdExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/ProcessingErrorException:1.0"))
                    throw PerformanceIRPSystem.ProcessingErrorExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidParameterException:1.0"))
                    throw PerformanceIRPSystem.InvalidParameterExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return lookup_performance_monitoring (performance_monitoring_id, observation_class_list, observation_object_list, granularity_period, schedule, reporting_period, destination, performance_monitoring_state, measurement_name        );
            } finally {
                _releaseReply ($in);
            }
  } // lookup_performance_monitoring

  public CommonIRPConstDefs.Signal delete_performance_monitoring (int performance_monitoring_id) throws PerformanceIRPSystem.OptionalOperationNotSupportedException, PerformanceIRPSystem.NoSuchIdException, PerformanceIRPSystem.ProcessingErrorException, PerformanceIRPSystem.InvalidPerformanceMonitoringTypeException, PerformanceIRPSystem.InvalidParameterException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delete_performance_monitoring", true);
                PerformanceIRPConstDefs.PerformanceMonitoringIdHelper.write ($out, performance_monitoring_id);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:PerformanceIRPSystem/OptionalOperationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalOperationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/NoSuchIdException:1.0"))
                    throw PerformanceIRPSystem.NoSuchIdExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/ProcessingErrorException:1.0"))
                    throw PerformanceIRPSystem.ProcessingErrorExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidPerformanceMonitoringTypeException:1.0"))
                    throw PerformanceIRPSystem.InvalidPerformanceMonitoringTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidParameterException:1.0"))
                    throw PerformanceIRPSystem.InvalidParameterExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return delete_performance_monitoring (performance_monitoring_id        );
            } finally {
                _releaseReply ($in);
            }
  } // delete_performance_monitoring


  // NoSuchIdException is raised if all provided id:s are incorrect.
  public CommonIRPConstDefs.Signal suspend_performance_monitoring (int[] performance_monitoring_id_list, PerformanceIRPConstDefs.PerformanceMonitoringIdListHolder bad_performance_monitoring_id_list) throws PerformanceIRPSystem.OptionalOperationNotSupportedException, PerformanceIRPSystem.ProcessingErrorException, PerformanceIRPSystem.NoSuchIdException, PerformanceIRPSystem.InvalidParameterException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("suspend_performance_monitoring", true);
                PerformanceIRPConstDefs.PerformanceMonitoringIdListHelper.write ($out, performance_monitoring_id_list);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                bad_performance_monitoring_id_list.value = PerformanceIRPConstDefs.PerformanceMonitoringIdListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:PerformanceIRPSystem/OptionalOperationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalOperationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/ProcessingErrorException:1.0"))
                    throw PerformanceIRPSystem.ProcessingErrorExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/NoSuchIdException:1.0"))
                    throw PerformanceIRPSystem.NoSuchIdExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidParameterException:1.0"))
                    throw PerformanceIRPSystem.InvalidParameterExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return suspend_performance_monitoring (performance_monitoring_id_list, bad_performance_monitoring_id_list        );
            } finally {
                _releaseReply ($in);
            }
  } // suspend_performance_monitoring


  //
  public CommonIRPConstDefs.Signal resume_performance_monitoring (int[] performance_monitoring_id_list, PerformanceIRPConstDefs.PerformanceMonitoringIdListHolder bad_performance_monitoring_list, PerformanceIRPConstDefs.PerformanceMonitoringIdListHolder rejected_performance_monitoring_list) throws PerformanceIRPSystem.OptionalOperationNotSupportedException, PerformanceIRPSystem.ProcessingErrorException, PerformanceIRPSystem.NumberOfCountersExceededException, PerformanceIRPSystem.NumberOfMonitorsExceededException, PerformanceIRPSystem.InvalidParameterException, PerformanceIRPSystem.NoSuchIdException, PerformanceIRPSystem.OverloadException, PerformanceIRPSystem.GranularityAndAttributeActivationException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("resume_performance_monitoring", true);
                PerformanceIRPConstDefs.PerformanceMonitoringIdListHelper.write ($out, performance_monitoring_id_list);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                bad_performance_monitoring_list.value = PerformanceIRPConstDefs.PerformanceMonitoringIdListHelper.read ($in);
                rejected_performance_monitoring_list.value = PerformanceIRPConstDefs.PerformanceMonitoringIdListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:PerformanceIRPSystem/OptionalOperationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalOperationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/ProcessingErrorException:1.0"))
                    throw PerformanceIRPSystem.ProcessingErrorExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/NumberOfCountersExceededException:1.0"))
                    throw PerformanceIRPSystem.NumberOfCountersExceededExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/NumberOfMonitorsExceededException:1.0"))
                    throw PerformanceIRPSystem.NumberOfMonitorsExceededExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidParameterException:1.0"))
                    throw PerformanceIRPSystem.InvalidParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/NoSuchIdException:1.0"))
                    throw PerformanceIRPSystem.NoSuchIdExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/OverloadException:1.0"))
                    throw PerformanceIRPSystem.OverloadExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/GranularityAndAttributeActivationException:1.0"))
                    throw PerformanceIRPSystem.GranularityAndAttributeActivationExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return resume_performance_monitoring (performance_monitoring_id_list, bad_performance_monitoring_list, rejected_performance_monitoring_list        );
            } finally {
                _releaseReply ($in);
            }
  } // resume_performance_monitoring

  public CommonIRPConstDefs.Signal get_performance_monitoring_report (int performance_monitoring_id, PerformanceIRPConstDefs.PerformanceMonitoringReportHolder performance_monitoring_report) throws PerformanceIRPSystem.OptionalOperationNotSupportedException, PerformanceIRPSystem.ProcessingErrorException, PerformanceIRPSystem.NoSuchIdException, PerformanceIRPSystem.InvalidParameterException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_performance_monitoring_report", true);
                PerformanceIRPConstDefs.PerformanceMonitoringIdHelper.write ($out, performance_monitoring_id);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                performance_monitoring_report.value = PerformanceIRPConstDefs.PerformanceMonitoringReportHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:PerformanceIRPSystem/OptionalOperationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalOperationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/ProcessingErrorException:1.0"))
                    throw PerformanceIRPSystem.ProcessingErrorExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/NoSuchIdException:1.0"))
                    throw PerformanceIRPSystem.NoSuchIdExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidParameterException:1.0"))
                    throw PerformanceIRPSystem.InvalidParameterExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_performance_monitoring_report (performance_monitoring_id, performance_monitoring_report        );
            } finally {
                _releaseReply ($in);
            }
  } // get_performance_monitoring_report

  public CommonIRPConstDefs.Signal filter_performance_monitoring_report (int[] performance_monitoring_id_list, PerformanceIRPConstDefs.RecordingType recording_type, PerformanceIRPConstDefs.ObservationObject triggering_object, PerformanceIRPConstDefs.ObservationObject[] observation_object_list, PerformanceIRPConstDefs.Filter filter, int[] time_window, int sampling_rate, PerformanceIRPConstDefs.PerformanceMonitoringIdListHolder bad_performance_monitoring_id_list) throws PerformanceIRPSystem.OptionalOperationNotSupportedException, PerformanceIRPSystem.OptionalParameterNotSupportedException, PerformanceIRPSystem.InvalidPerformanceMonitoringTypeException, PerformanceIRPSystem.ProcessingErrorException, PerformanceIRPSystem.InvalidParameterException, PerformanceIRPSystem.InvalidObservationObjectListException, PerformanceIRPSystem.InvalidFilterException, PerformanceIRPSystem.InvalidTriggeringObjectException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("filter_performance_monitoring_report", true);
                PerformanceIRPConstDefs.PerformanceMonitoringIdListHelper.write ($out, performance_monitoring_id_list);
                PerformanceIRPConstDefs.RecordingTypeHelper.write ($out, recording_type);
                PerformanceIRPConstDefs.ObservationObjectHelper.write ($out, triggering_object);
                PerformanceIRPConstDefs.ObservationObjectListHelper.write ($out, observation_object_list);
                PerformanceIRPConstDefs.FilterHelper.write ($out, filter);
                PerformanceIRPConstDefs.TimeWindowHelper.write ($out, time_window);
                PerformanceIRPConstDefs.SamplingRateHelper.write ($out, sampling_rate);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                bad_performance_monitoring_id_list.value = PerformanceIRPConstDefs.PerformanceMonitoringIdListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:PerformanceIRPSystem/OptionalOperationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalOperationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/OptionalParameterNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalParameterNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidPerformanceMonitoringTypeException:1.0"))
                    throw PerformanceIRPSystem.InvalidPerformanceMonitoringTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/ProcessingErrorException:1.0"))
                    throw PerformanceIRPSystem.ProcessingErrorExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidParameterException:1.0"))
                    throw PerformanceIRPSystem.InvalidParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidObservationObjectListException:1.0"))
                    throw PerformanceIRPSystem.InvalidObservationObjectListExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidFilterException:1.0"))
                    throw PerformanceIRPSystem.InvalidFilterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidTriggeringObjectException:1.0"))
                    throw PerformanceIRPSystem.InvalidTriggeringObjectExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return filter_performance_monitoring_report (performance_monitoring_id_list, recording_type, triggering_object, observation_object_list, filter, time_window, sampling_rate, bad_performance_monitoring_id_list        );
            } finally {
                _releaseReply ($in);
            }
  } // filter_performance_monitoring_report

  public CommonIRPConstDefs.Signal lookup_filter_performance_monitoring_report (int performance_monitoring_id, PerformanceIRPConstDefs.RecordingTypeHolder recording_type, PerformanceIRPConstDefs.ObservationObjectHolder triggering_object, PerformanceIRPConstDefs.ObservationObjectListHolder observation_object_list, PerformanceIRPConstDefs.FilterHolder filter, PerformanceIRPConstDefs.TimeWindowHolder time_window, org.omg.CORBA.IntHolder sampling_rate) throws PerformanceIRPSystem.OptionalOperationNotSupportedException, PerformanceIRPSystem.NoSuchIdException, PerformanceIRPSystem.InvalidPerformanceMonitoringTypeException, PerformanceIRPSystem.ProcessingErrorException, PerformanceIRPSystem.InvalidParameterException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("lookup_filter_performance_monitoring_report", true);
                PerformanceIRPConstDefs.PerformanceMonitoringIdHelper.write ($out, performance_monitoring_id);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                recording_type.value = PerformanceIRPConstDefs.RecordingTypeHelper.read ($in);
                triggering_object.value = PerformanceIRPConstDefs.ObservationObjectHelper.read ($in);
                observation_object_list.value = PerformanceIRPConstDefs.ObservationObjectListHelper.read ($in);
                filter.value = PerformanceIRPConstDefs.FilterHelper.read ($in);
                time_window.value = PerformanceIRPConstDefs.TimeWindowHelper.read ($in);
                sampling_rate.value = PerformanceIRPConstDefs.SamplingRateHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:PerformanceIRPSystem/OptionalOperationNotSupportedException:1.0"))
                    throw PerformanceIRPSystem.OptionalOperationNotSupportedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/NoSuchIdException:1.0"))
                    throw PerformanceIRPSystem.NoSuchIdExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidPerformanceMonitoringTypeException:1.0"))
                    throw PerformanceIRPSystem.InvalidPerformanceMonitoringTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/ProcessingErrorException:1.0"))
                    throw PerformanceIRPSystem.ProcessingErrorExceptionHelper.read ($in);
                else if (_id.equals ("IDL:PerformanceIRPSystem/InvalidParameterException:1.0"))
                    throw PerformanceIRPSystem.InvalidParameterExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return lookup_filter_performance_monitoring_report (performance_monitoring_id, recording_type, triggering_object, observation_object_list, filter, time_window, sampling_rate        );
            } finally {
                _releaseReply ($in);
            }
  } // lookup_filter_performance_monitoring_report

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:PmServiceExtended/PerformanceMonitoringExtended:1.0", 
    "IDL:PerformanceIRPSystem/PerformanceMonitoringOperations:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _PerformanceMonitoringExtendedStub
