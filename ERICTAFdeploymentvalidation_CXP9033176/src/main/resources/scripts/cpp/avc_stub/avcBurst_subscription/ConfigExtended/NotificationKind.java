package ConfigExtended;


/**
* ConfigExtended/NotificationKind.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from configuration_ext_K.idl
* Tuesday, May 22, 2018 12:36:12 PM GMT+01:00
*/

public class NotificationKind implements org.omg.CORBA.portable.IDLEntity
{
  private        int __value;
  private static int __size = 6;
  private static ConfigExtended.NotificationKind[] __array = new ConfigExtended.NotificationKind [__size];

  public static final int _MOCreatedType = 0;
  public static final ConfigExtended.NotificationKind MOCreatedType = new ConfigExtended.NotificationKind(_MOCreatedType);
  public static final int _MODeletedType = 1;
  public static final ConfigExtended.NotificationKind MODeletedType = new ConfigExtended.NotificationKind(_MODeletedType);
  public static final int _AVCType = 2;
  public static final ConfigExtended.NotificationKind AVCType = new ConfigExtended.NotificationKind(_AVCType);
  public static final int _ACType = 3;
  public static final ConfigExtended.NotificationKind ACType = new ConfigExtended.NotificationKind(_ACType);
  public static final int _SequenceDeltaType = 4;
  public static final ConfigExtended.NotificationKind SequenceDeltaType = new ConfigExtended.NotificationKind(_SequenceDeltaType);
  public static final int _OverflowType = 5;
  public static final ConfigExtended.NotificationKind OverflowType = new ConfigExtended.NotificationKind(_OverflowType);

  public int value ()
  {
    return __value;
  }

  public static ConfigExtended.NotificationKind from_int (int value)
  {
    if (value >= 0 && value < __size)
      return __array[value];
    else
      throw new org.omg.CORBA.BAD_PARAM ();
  }

  protected NotificationKind (int value)
  {
    __value = value;
    __array[__value] = this;
  }
   public String toString()  {
    int currValue = this.value();
    String notifType = "";
    switch(currValue) {
        case 0: 
            notifType = "MOCreated";
            break;
        case 1:
            notifType = "MODeleted";
            break;
        case 2:
            notifType = "AVC";
            break;
        case 3:
            notifType = "AC";
            break;
        case 4:
            notifType = "SequenceDelta";
            break;
        case 5:
            notifType = "Overflow";
            break;
    }       
    return notifType;
  }
} // class NotificationKind
