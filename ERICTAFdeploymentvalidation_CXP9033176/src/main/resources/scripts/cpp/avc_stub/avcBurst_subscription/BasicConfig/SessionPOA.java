package BasicConfig;


/**
* BasicConfig/SessionPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from configuration_K.idl
* Tuesday, May 22, 2018 12:36:12 PM GMT+01:00
*/


/**
   * Session interface
   */
public abstract class SessionPOA extends org.omg.PortableServer.Servant
 implements BasicConfig.SessionOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("get_session_id", new java.lang.Integer (0));
    _methods.put ("restart", new java.lang.Integer (1));
    _methods.put ("begin", new java.lang.Integer (2));
    _methods.put ("rollback", new java.lang.Integer (3));
    _methods.put ("commit", new java.lang.Integer (4));
    _methods.put ("end", new java.lang.Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // BasicConfig/Session/get_session_id
       {
         String $result = null;
         $result = this.get_session_id ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // BasicConfig/Session/restart
       {
         try {
           this.restart ();
           out = $rh.createReply();
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // BasicConfig/Session/begin
       {
         try {
           int operationTimeout = BasicConfig.TransactionTimeoutHelper.read (in);
           this.begin (operationTimeout);
           out = $rh.createReply();
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // BasicConfig/Session/rollback
       {
         try {
           this.rollback ();
           out = $rh.createReply();
         } catch (BasicConfig.TransactionFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.TransactionFailureHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // BasicConfig/Session/commit
       {
         try {
           this.commit ();
           out = $rh.createReply();
         } catch (BasicConfig.TransactionFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.TransactionFailureHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // BasicConfig/Session/end
       {
         try {
           this.end ();
           out = $rh.createReply();
         } catch (BasicConfig.TransactionFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.TransactionFailureHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:BasicConfig/Session:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Session _this() 
  {
    return SessionHelper.narrow(
    super._this_object());
  }

  public Session _this(org.omg.CORBA.ORB orb) 
  {
    return SessionHelper.narrow(
    super._this_object(orb));
  }


} // class SessionPOA
