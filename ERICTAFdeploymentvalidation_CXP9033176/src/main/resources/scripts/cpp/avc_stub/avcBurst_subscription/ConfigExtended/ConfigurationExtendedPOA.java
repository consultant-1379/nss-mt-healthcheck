package ConfigExtended;


/**
* ConfigExtended/ConfigurationExtendedPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from configuration_ext_K.idl
* Tuesday, May 22, 2018 12:36:12 PM GMT+01:00
*/

public abstract class ConfigurationExtendedPOA extends org.omg.PortableServer.Servant
 implements ConfigExtended.ConfigurationExtendedOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("get_CS_interface_version", new java.lang.Integer (0));
    _methods.put ("get_notification_producer", new java.lang.Integer (1));
    _methods.put ("create_extended_session", new java.lang.Integer (2));
    _methods.put ("get_MIB_info_ext", new java.lang.Integer (3));
    _methods.put ("get_root_MO", new java.lang.Integer (4));
    _methods.put ("get_MO_parent", new java.lang.Integer (5));
    _methods.put ("get_MO_info_by_name", new java.lang.Integer (6));
    _methods.put ("get_MO_info_by_id", new java.lang.Integer (7));
    _methods.put ("get_MO_containment", new java.lang.Integer (8));
    _methods.put ("next_MO_info", new java.lang.Integer (9));
    _methods.put ("delete_MO_info_iter", new java.lang.Integer (10));
    _methods.put ("get_MO_attributes", new java.lang.Integer (11));
    _methods.put ("get_mo_instance_count", new java.lang.Integer (12));
    _methods.put ("create_session", new java.lang.Integer (13));
    _methods.put ("create_MIB", new java.lang.Integer (14));
    _methods.put ("delete_MIB", new java.lang.Integer (15));
    _methods.put ("get_MIB", new java.lang.Integer (16));
    _methods.put ("get_MIBs", new java.lang.Integer (17));
    _methods.put ("basic_create_root_MO", new java.lang.Integer (18));
    _methods.put ("basic_get_root_MO", new java.lang.Integer (19));
    _methods.put ("get_MIB_info", new java.lang.Integer (20));
    _methods.put ("set_MIM_version", new java.lang.Integer (21));
    _methods.put ("set_prefix_MIB", new java.lang.Integer (22));
    _methods.put ("create_MG", new java.lang.Integer (23));
    _methods.put ("delete_MG", new java.lang.Integer (24));
    _methods.put ("get_MGs", new java.lang.Integer (25));
    _methods.put ("get_MG", new java.lang.Integer (26));
    _methods.put ("get_MG_contents_short", new java.lang.Integer (27));
    _methods.put ("get_MG_contents_full", new java.lang.Integer (28));
    _methods.put ("get_MG_info", new java.lang.Integer (29));
    _methods.put ("add_MO_to_MG", new java.lang.Integer (30));
    _methods.put ("remove_MO_from_MG", new java.lang.Integer (31));
    _methods.put ("basic_create_MO", new java.lang.Integer (32));
    _methods.put ("basic_delete_MO", new java.lang.Integer (33));
    _methods.put ("basic_set_MO", new java.lang.Integer (34));
    _methods.put ("basic_get_MO_containment_short", new java.lang.Integer (35));
    _methods.put ("basic_get_MO_containment_full", new java.lang.Integer (36));
    _methods.put ("basic_get_attr_MO_containment", new java.lang.Integer (37));
    _methods.put ("basic_get_MO_association_short", new java.lang.Integer (38));
    _methods.put ("basic_get_MO_association_full", new java.lang.Integer (39));
    _methods.put ("basic_get_attr_MO_association", new java.lang.Integer (40));
    _methods.put ("basic_is_existing", new java.lang.Integer (41));
    _methods.put ("basic_create_association", new java.lang.Integer (42));
    _methods.put ("basic_delete_association", new java.lang.Integer (43));
    _methods.put ("basic_lock_MO", new java.lang.Integer (44));
    _methods.put ("basic_unlock_MO", new java.lang.Integer (45));
    _methods.put ("basic_is_locked_MO", new java.lang.Integer (46));
    _methods.put ("basic_get_MO_info", new java.lang.Integer (47));
    _methods.put ("basic_get_MO_parent", new java.lang.Integer (48));
    _methods.put ("basic_get_MO_attributes", new java.lang.Integer (49));
    _methods.put ("basic_set_MO_attributes", new java.lang.Integer (50));
    _methods.put ("action", new java.lang.Integer (51));
    _methods.put ("convert_MO", new java.lang.Integer (52));
    _methods.put ("convert_MOs", new java.lang.Integer (53));
    _methods.put ("next_MO", new java.lang.Integer (54));
    _methods.put ("next_MOs", new java.lang.Integer (55));
    _methods.put ("all_MOs", new java.lang.Integer (56));
    _methods.put ("delete_Iter", new java.lang.Integer (57));
    _methods.put ("ext_next_MO", new java.lang.Integer (58));
    _methods.put ("ext_next_MOs", new java.lang.Integer (59));
    _methods.put ("ext_all_MOs", new java.lang.Integer (60));
    _methods.put ("ext_delete_Iter", new java.lang.Integer (61));
    _methods.put ("attr_next_MO", new java.lang.Integer (62));
    _methods.put ("attr_next_MOs", new java.lang.Integer (63));
    _methods.put ("attr_all_MOs", new java.lang.Integer (64));
    _methods.put ("attr_delete_Iter", new java.lang.Integer (65));
    _methods.put ("get_QoS", new java.lang.Integer (66));
    _methods.put ("set_QoS", new java.lang.Integer (67));
    _methods.put ("supported_QoS", new java.lang.Integer (68));
    _methods.put ("create_hopper", new java.lang.Integer (69));
    _methods.put ("delete_hopper", new java.lang.Integer (70));
    _methods.put ("create_association_hopper", new java.lang.Integer (71));
    _methods.put ("delete_association_hopper", new java.lang.Integer (72));
    _methods.put ("create_softlink", new java.lang.Integer (73));
    _methods.put ("delete_softlink", new java.lang.Integer (74));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /** Operation: get_CS_interface_version
         *  Documentation:
         *      Returns a list of all supported CS interface versions
         *
         *      Parameters:
         *      (return): A list of all CS interface versions supported by
         *      this implementation.
         *
         */
       case 0:  // ConfigExtended/ConfigurationExtended/get_CS_interface_version
       {
         String $result[] = null;
         $result = this.get_CS_interface_version ();
         out = $rh.createReply();
         ConfigExtended.ConfigurationExtendedPackage.VersionNumberSetHelper.write (out, $result);
         break;
       }


  /**
         * Retrieve NotificationProducer object
         */
       case 1:  // ConfigExtended/ConfigurationExtended/get_notification_producer
       {
         ConfigExtended.NotificationProducer $result = null;
         $result = this.get_notification_producer ();
         out = $rh.createReply();
         ConfigExtended.NotificationProducerHelper.write (out, $result);
         break;
       }


  /**
         * Methods for extended session.
         */
       case 2:  // ConfigExtended/ConfigurationExtended/create_extended_session
       {
         try {
           String id = in.read_string ();
           int idlTimeout = BasicConfig.SessionTimeoutHelper.read (in);
           ConfigExtended.SessionExtended $result = null;
           $result = this.create_extended_session (id, idlTimeout);
           out = $rh.createReply();
           ConfigExtended.SessionExtendedHelper.write (out, $result);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /** Operation: get_MIB_info_ext
         *  Documentation:
         *      Returns Information about the MIB
         *
         *      Parameters:
         *      (in) MIBRef: The MIBRef Object
         *           Session: A Session Object containing the current
         *		    transaction
         *      (return): MIBInfoExt structure containing id,name,type,timecreated,version
         *						release&name prefix.
         */
       case 3:  // ConfigExtended/ConfigurationExtended/get_MIB_info_ext
       {
         try {
           BasicConfig.MIBRef mib = ConfigExtended.MIBRefHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           ConfigExtended.MIBInfoExt $result = null;
           $result = this.get_MIB_info_ext (mib, session);
           out = $rh.createReply();
           ConfigExtended.MIBInfoExtHelper.write (out, $result);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /** Operation: get_root_MO
         *  Documentation:
         *      Returns root MO of the MIB.
         *
         *      Parameters:
         *      (in) session: A session object containing the
         *      current transaction.
         *      (return): The MOInfo of the root node.
         */
       case 4:  // ConfigExtended/ConfigurationExtended/get_root_MO
       {
         try {
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           ConfigExtended.MOInfo $result = null;
           $result = this.get_root_MO (session);
           out = $rh.createReply();
           ConfigExtended.MOInfoHelper.write (out, $result);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         }
         break;
       }


  /** Operation: get_MO_parent
         *  Documentation:
         *      Returns MOInfo for the parent MO.
         *
         *      Parameters:
         *      (in) mo: The distinguished name of the MO whose
         *      parent MOInfo should be retrieved from.
         *      It is possible to use either full or local
         *      distinguished name.
         *      (in) session: A session object containing the
         *      current transaction.
         *      (return): The parent's MOInfo.
         */
       case 5:  // ConfigExtended/ConfigurationExtended/get_MO_parent
       {
         try {
           String mo = ConfigExtended.FDNHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           ConfigExtended.MOInfo $result = null;
           $result = this.get_MO_parent (mo, session);
           out = $rh.createReply();
           ConfigExtended.MOInfoHelper.write (out, $result);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /** Operation: get_MO_info_by_name
         *  Documentation:
         *      Used to retrieve MOInfo from one MO by specifying
         *      distinguished name.
         *
         *      Parameters:
         *      (in) mo: The distinguished name of the MO to retrieve
         *      MOInfo from. It is possible to use either full or
         *      local distinguished name.
         *      (in) session: A session object containing the
         *      current transaction.
         *      (return): The MOInfo.
         */
       case 6:  // ConfigExtended/ConfigurationExtended/get_MO_info_by_name
       {
         try {
           String mo = ConfigExtended.FDNHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           ConfigExtended.MOInfo $result = null;
           $result = this.get_MO_info_by_name (mo, session);
           out = $rh.createReply();
           ConfigExtended.MOInfoHelper.write (out, $result);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /** Operation: get_MO_info_by_id
         *  Documentation:
         *      Used to retrieve MOInfo from one MO by specifying
         *      the MO identity (number).
         *
         *      Parameters:
         *      (in) mo: The identity of the MO to retrieve MOInfo
         *      from. The identity is the same as the identity carried
         *      in a BasicConfig::MORef.
         *      (in) session: A session object containing the
         *      current transaction.
         *      (return): The MOInfo.
         */
       case 7:  // ConfigExtended/ConfigurationExtended/get_MO_info_by_id
       {
         try {
           long mo = ConfigExtended.OIDTYPEHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           ConfigExtended.MOInfo $result = null;
           $result = this.get_MO_info_by_id (mo, session);
           out = $rh.createReply();
           ConfigExtended.MOInfoHelper.write (out, $result);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /** Operation: get_MO_containment
         *  Documentation:
         *      Used to retrieve MOInfo from several MOs by using
         *      scope & filter.
         *
         *      Parameters:
         *      (in) baseMO: The base MO in the MIB from where the
         *      actor wants to retrieve MO information. It is possible
         *      to use either full or local distinguished name.
         *      (in) scope: The number of levels below the base MO
         *      that is retrieved. Set to SCOPE_ALL_LEVELS (-1) to
         *      get the complete subtree.
         *      (in) filter: A constraint for selecting specific MOs.
         *      It is the same filter as specified in BasicConfig.
         *      (in) session: A session object containing the
         *      current transaction.
         *      (return): An MOInfo iterator containing all
         *      MOInfo from the matching MOs.
         */
       case 8:  // ConfigExtended/ConfigurationExtended/get_MO_containment
       {
         try {
           String baseMO = ConfigExtended.FDNHelper.read (in);
           int scope = BasicConfig.ScopeHelper.read (in);
           BasicConfig.Filter filter = ConfigExtended.FilterHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           int $result = (int)0;
           $result = this.get_MO_containment (baseMO, scope, filter, session);
           out = $rh.createReply();
           out.write_ulong ($result);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /** Operation: next_MO_info
         *  Documentation:
         *      Used to iterate through the MOInfo objects returned
         *      by the get_MO_containment method.
         *
         *      Parameters:
         *      (in) iterator: The iterator to retrieve MOInfo from.
         *      (in) howMany: Specifies the number of MOInfo objects
         *      that should be returned.
         *      (in) session: A session object containing the
         *      current transaction.
         *      (out) mos: An array containing the MOInfo.
         *      (return): Returns true if the iterator contains more
         *      MOInfo objects. If the Iterator is empty, false is
         *      returned and the iterator is deleted.
         */
       case 9:  // ConfigExtended/ConfigurationExtended/next_MO_info
       {
         try {
           int iterator = ConfigExtended.MOInfoIterRefHelper.read (in);
           int howMany = in.read_ulong ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           ConfigExtended.MOInfoSeqHolder mos = new ConfigExtended.MOInfoSeqHolder ();
           boolean $result = false;
           $result = this.next_MO_info (iterator, howMany, session, mos);
           out = $rh.createReply();
           out.write_boolean ($result);
           ConfigExtended.MOInfoSeqHelper.write (out, mos.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /** Operation: delete_MO_info_iter
         *  Documentation:
         *      Deletes the iterator returned by the
         *      get_MO_containment method.
         *
         *      Parameters:
         *      (in) iterator: The iterator to delete.
         *      (in) session: A session object containing the
         *      current transaction.
         *      (return): Returns true if the iterator contains more
         *      MOInfo objects. If the Iterator is empty, false is
         *      returned and the iterator is deleted.
         */
       case 10:  // ConfigExtended/ConfigurationExtended/delete_MO_info_iter
       {
         try {
           int iterator = ConfigExtended.MOInfoIterRefHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.delete_MO_info_iter (iterator, session);
           out = $rh.createReply();
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /** Operation: get_MO_attributes
         *  Documentation:
         *      Used to retrieve the attribute values for a number of MOs in
         *      one call.
         *
         *      Parameters:
         *      (in) requestedAttributes: is a sequence of a structure where each
         *      struct contains the FDN of the adressed MO and the names of
         *      the attributes to return.
         *      (in) session: A session object containing the
         *      current transaction.
         *      (return):  The requested attributes are returned with name and
         *      value. Index [n] corresponds to index [n] in the
         *      requestedAttributes parameter
         */
       case 11:  // ConfigExtended/ConfigurationExtended/get_MO_attributes
       {
         try {
           ConfigExtended.RequestedAttributes requestedAttributes[] = ConfigExtended.RequestedAttributeSeqHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           ConfigExtended.ReturnedAttributes $result[] = null;
           $result = this.get_MO_attributes (requestedAttributes, session);
           out = $rh.createReply();
           ConfigExtended.ReturnedAttributesSeqHelper.write (out, $result);
         } catch (BasicConfig.NotAccepted $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotAcceptedHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /** Operation: get_mo_instance_count
         *  Documentation:
         *      The Actor invokes this operation to retrieve the count of
         *      the number of MO instances defined in the system
         *
         *      Only interface 1c5 will support this operation.
         *
         *      Parameters:
         *
         *      (return): The latest MO instance count.
         */
       case 12:  // ConfigExtended/ConfigurationExtended/get_mo_instance_count
       {
         int $result = (int)0;
         $result = this.get_mo_instance_count ();
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }


  /**
       * Methods for Session
       */
       case 13:  // BasicConfig/BasicConfiguration/create_session
       {
         try {
           String id = in.read_string ();
           int idleTimeout = BasicConfig.SessionTimeoutHelper.read (in);
           BasicConfig.Session $result = null;
           $result = this.create_session (id, idleTimeout);
           out = $rh.createReply();
           BasicConfig.SessionHelper.write (out, $result);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /**
       * Methods for MIB.
       */
       case 14:  // BasicConfig/BasicConfiguration/create_MIB
       {
         try {
           String name = BasicConfig.MIBNameHelper.read (in);
           String type = BasicConfig.MIMNameHelper.read (in);
           String version = BasicConfig.MIMVersionHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.MIBRef $result = null;
           $result = this.create_MIB (name, type, version, session);
           out = $rh.createReply();
           BasicConfig.MIBRefHelper.write (out, $result);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 15:  // BasicConfig/BasicConfiguration/delete_MIB
       {
         try {
           BasicConfig.MIBRef mib = BasicConfig.MIBRefHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.delete_MIB (mib, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 16:  // BasicConfig/BasicConfiguration/get_MIB
       {
         try {
           String name = BasicConfig.MIBNameHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.MIBRef $result = null;
           $result = this.get_MIB (name, session);
           out = $rh.createReply();
           BasicConfig.MIBRefHelper.write (out, $result);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 17:  // BasicConfig/BasicConfiguration/get_MIBs
       {
         try {
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.MIBRef $result[] = null;
           $result = this.get_MIBs (session);
           out = $rh.createReply();
           BasicConfig.MIBRefSeqHelper.write (out, $result);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 18:  // BasicConfig/BasicConfiguration/basic_create_root_MO
       {
         try {
           String name = in.read_string ();
           String type = in.read_string ();
           BasicConfig.NameValue attributes[] = BasicConfig.AttributeSeqHelper.read (in);
           BasicConfig.MOAssociation associations[] = BasicConfig.MOAssociationSeqHelper.read (in);
           BasicConfig.MIBRef mib = BasicConfig.MIBRefHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.MORef $result = null;
           $result = this.basic_create_root_MO (name, type, attributes, associations, mib, session);
           out = $rh.createReply();
           BasicConfig.MORefHelper.write (out, $result);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.AlreadyDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.AlreadyDefinedHelper.write (out, $ex);
         }
         break;
       }

       case 19:  // BasicConfig/BasicConfiguration/basic_get_root_MO
       {
         try {
           BasicConfig.MIBRef mib = BasicConfig.MIBRefHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.MORef $result = null;
           $result = this.basic_get_root_MO (mib, session);
           out = $rh.createReply();
           BasicConfig.MORefHelper.write (out, $result);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         }
         break;
       }

       case 20:  // BasicConfig/BasicConfiguration/get_MIB_info
       {
         try {
           BasicConfig.MIBRef mib = BasicConfig.MIBRefHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.MIBInfo $result = null;
           $result = this.get_MIB_info (mib, session);
           out = $rh.createReply();
           BasicConfig.MIBInfoHelper.write (out, $result);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 21:  // BasicConfig/BasicConfiguration/set_MIM_version
       {
         try {
           BasicConfig.MIBRef mib = BasicConfig.MIBRefHelper.read (in);
           String version = BasicConfig.MIMVersionHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.set_MIM_version (mib, version, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.NotAccepted $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotAcceptedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 22:  // BasicConfig/BasicConfiguration/set_prefix_MIB
       {
         try {
           BasicConfig.MIBRef mib = BasicConfig.MIBRefHelper.read (in);
           CosNaming.NameComponent prefix[] = BasicConfig.DNameHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.set_prefix_MIB (mib, prefix, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.NotAccepted $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotAcceptedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /**
       * Methods for Managed Group
       */
       case 23:  // BasicConfig/BasicConfiguration/create_MG
       {
         try {
           String name = BasicConfig.MGNameHelper.read (in);
           BasicConfig.MORef mos[] = BasicConfig.MORefSeqHelper.read (in);
           BasicConfig.Filter filter = BasicConfig.FilterHelper.read (in);
           int scope = BasicConfig.ScopeHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.MGRef $result = null;
           $result = this.create_MG (name, mos, filter, scope, session);
           out = $rh.createReply();
           BasicConfig.MGRefHelper.write (out, $result);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 24:  // BasicConfig/BasicConfiguration/delete_MG
       {
         try {
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.delete_MG (mg, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 25:  // BasicConfig/BasicConfiguration/get_MGs
       {
         try {
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.MGRef $result[] = null;
           $result = this.get_MGs (session);
           out = $rh.createReply();
           BasicConfig.MGRefSeqHelper.write (out, $result);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 26:  // BasicConfig/BasicConfiguration/get_MG
       {
         try {
           int id = BasicConfig.MGIDHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.MGRef $result = null;
           $result = this.get_MG (id, session);
           out = $rh.createReply();
           BasicConfig.MGRefHelper.write (out, $result);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 27:  // BasicConfig/BasicConfiguration/get_MG_contents_short
       {
         try {
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           org.omg.CORBA.IntHolder count = new org.omg.CORBA.IntHolder ();
           count.value = in.read_ulong ();
           BasicConfig.MORefSeqHolder result = new BasicConfig.MORefSeqHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.IterRef $result = null;
           $result = this.get_MG_contents_short (mg, count, result, session);
           out = $rh.createReply();
           BasicConfig.IterRefHelper.write (out, $result);
           out.write_ulong (count.value);
           BasicConfig.MORefSeqHelper.write (out, result.value);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 28:  // BasicConfig/BasicConfiguration/get_MG_contents_full
       {
         try {
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           org.omg.CORBA.IntHolder count = new org.omg.CORBA.IntHolder ();
           count.value = in.read_ulong ();
           BasicConfig.ExtMORefSeqHolder result = new BasicConfig.ExtMORefSeqHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.ExtIterRef $result = null;
           $result = this.get_MG_contents_full (mg, count, result, session);
           out = $rh.createReply();
           BasicConfig.ExtIterRefHelper.write (out, $result);
           out.write_ulong (count.value);
           BasicConfig.ExtMORefSeqHelper.write (out, result.value);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 29:  // BasicConfig/BasicConfiguration/get_MG_info
       {
         try {
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.MGInfo $result = null;
           $result = this.get_MG_info (mg, session);
           out = $rh.createReply();
           BasicConfig.MGInfoHelper.write (out, $result);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 30:  // BasicConfig/BasicConfiguration/add_MO_to_MG
       {
         try {
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           BasicConfig.MORef mos[] = BasicConfig.MORefSeqHelper.read (in);
           BasicConfig.Filter filter = BasicConfig.FilterHelper.read (in);
           int scope = BasicConfig.ScopeHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.add_MO_to_MG (mg, mos, filter, scope, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 31:  // BasicConfig/BasicConfiguration/remove_MO_from_MG
       {
         try {
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           BasicConfig.MORef mos[] = BasicConfig.MORefSeqHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.remove_MO_from_MG (mg, mos, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /**
       * Methods for MOs
       */
       case 32:  // BasicConfig/BasicConfiguration/basic_create_MO
       {
         try {
           String name = BasicConfig.MONameHelper.read (in);
           String type = BasicConfig.MOTypeHelper.read (in);
           BasicConfig.MOidpair baseMO = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.MOidpair sourceMO = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.NameValue attributes[] = BasicConfig.AttributeSeqHelper.read (in);
           BasicConfig.MOAssociation associations[] = BasicConfig.MOAssociationSeqHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.MORef $result = null;
           $result = this.basic_create_MO (name, type, baseMO, sourceMO, attributes, associations, session);
           out = $rh.createReply();
           BasicConfig.MORefHelper.write (out, $result);
         } catch (BasicConfig.AlreadyDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.AlreadyDefinedHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 33:  // BasicConfig/BasicConfiguration/basic_delete_MO
       {
         try {
           BasicConfig.MOidpair baseMO = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           int scope = BasicConfig.ScopeHelper.read (in);
           BasicConfig.Filter filter = BasicConfig.FilterHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.basic_delete_MO (baseMO, mg, scope, filter, session);
           out = $rh.createReply();
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 34:  // BasicConfig/BasicConfiguration/basic_set_MO
       {
         try {
           BasicConfig.MOidpair baseMO = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           int scope = BasicConfig.ScopeHelper.read (in);
           BasicConfig.Filter filter = BasicConfig.FilterHelper.read (in);
           BasicConfig.NameValue attributes[] = BasicConfig.AttributeSeqHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.IterRef $result = null;
           $result = this.basic_set_MO (baseMO, mg, scope, filter, attributes, session);
           out = $rh.createReply();
           BasicConfig.IterRefHelper.write (out, $result);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 35:  // BasicConfig/BasicConfiguration/basic_get_MO_containment_short
       {
         try {
           BasicConfig.MOidpair baseMO = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           int scope = BasicConfig.ScopeHelper.read (in);
           BasicConfig.Filter filter = BasicConfig.FilterHelper.read (in);
           org.omg.CORBA.IntHolder count = new org.omg.CORBA.IntHolder ();
           count.value = in.read_ulong ();
           BasicConfig.MORefSeqHolder result = new BasicConfig.MORefSeqHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.IterRef $result = null;
           $result = this.basic_get_MO_containment_short (baseMO, mg, scope, filter, count, result, session);
           out = $rh.createReply();
           BasicConfig.IterRefHelper.write (out, $result);
           out.write_ulong (count.value);
           BasicConfig.MORefSeqHelper.write (out, result.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 36:  // BasicConfig/BasicConfiguration/basic_get_MO_containment_full
       {
         try {
           BasicConfig.MOidpair baseMO = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           int scope = BasicConfig.ScopeHelper.read (in);
           BasicConfig.Filter filter = BasicConfig.FilterHelper.read (in);
           org.omg.CORBA.IntHolder count = new org.omg.CORBA.IntHolder ();
           count.value = in.read_ulong ();
           BasicConfig.ExtMORefSeqHolder result = new BasicConfig.ExtMORefSeqHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.ExtIterRef $result = null;
           $result = this.basic_get_MO_containment_full (baseMO, mg, scope, filter, count, result, session);
           out = $rh.createReply();
           BasicConfig.ExtIterRefHelper.write (out, $result);
           out.write_ulong (count.value);
           BasicConfig.ExtMORefSeqHelper.write (out, result.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 37:  // BasicConfig/BasicConfiguration/basic_get_attr_MO_containment
       {
         try {
           BasicConfig.MOidpair baseMO = BasicConfig.MOidpairHelper.read (in);
           int scope = BasicConfig.ScopeHelper.read (in);
           BasicConfig.Filter filter = BasicConfig.FilterHelper.read (in);
           String attributeNames[] = BasicConfig.AttributeNameSeqHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.AttrIterRef $result = null;
           $result = this.basic_get_attr_MO_containment (baseMO, scope, filter, attributeNames, session);
           out = $rh.createReply();
           BasicConfig.AttrIterRefHelper.write (out, $result);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.NotAccepted $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotAcceptedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 38:  // BasicConfig/BasicConfiguration/basic_get_MO_association_short
       {
         try {
           BasicConfig.MOidpair baseMO = BasicConfig.MOidpairHelper.read (in);
           String roleName = in.read_string ();
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           int scope = BasicConfig.ScopeHelper.read (in);
           BasicConfig.Filter filter = BasicConfig.FilterHelper.read (in);
           org.omg.CORBA.IntHolder count = new org.omg.CORBA.IntHolder ();
           count.value = in.read_ulong ();
           BasicConfig.MORefSeqHolder result = new BasicConfig.MORefSeqHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.IterRef $result = null;
           $result = this.basic_get_MO_association_short (baseMO, roleName, mg, scope, filter, count, result, session);
           out = $rh.createReply();
           BasicConfig.IterRefHelper.write (out, $result);
           out.write_ulong (count.value);
           BasicConfig.MORefSeqHelper.write (out, result.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 39:  // BasicConfig/BasicConfiguration/basic_get_MO_association_full
       {
         try {
           BasicConfig.MOidpair baseMO = BasicConfig.MOidpairHelper.read (in);
           String roleName = in.read_string ();
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           int scope = BasicConfig.ScopeHelper.read (in);
           BasicConfig.Filter filter = BasicConfig.FilterHelper.read (in);
           org.omg.CORBA.IntHolder count = new org.omg.CORBA.IntHolder ();
           count.value = in.read_ulong ();
           BasicConfig.ExtMORefSeqHolder result = new BasicConfig.ExtMORefSeqHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.ExtIterRef $result = null;
           $result = this.basic_get_MO_association_full (baseMO, roleName, mg, scope, filter, count, result, session);
           out = $rh.createReply();
           BasicConfig.ExtIterRefHelper.write (out, $result);
           out.write_ulong (count.value);
           BasicConfig.ExtMORefSeqHelper.write (out, result.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 40:  // BasicConfig/BasicConfiguration/basic_get_attr_MO_association
       {
         try {
           BasicConfig.MOidpair baseMO = BasicConfig.MOidpairHelper.read (in);
           String roleName = in.read_string ();
           int scope = BasicConfig.ScopeHelper.read (in);
           BasicConfig.Filter filter = BasicConfig.FilterHelper.read (in);
           String attributeNames[] = BasicConfig.AttributeNameSeqHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.AttrIterRef $result = null;
           $result = this.basic_get_attr_MO_association (baseMO, roleName, scope, filter, attributeNames, session);
           out = $rh.createReply();
           BasicConfig.AttrIterRefHelper.write (out, $result);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.NotAccepted $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotAcceptedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 41:  // BasicConfig/BasicConfiguration/basic_is_existing
       {
         try {
           BasicConfig.MOidpair mo = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           boolean $result = false;
           $result = this.basic_is_existing (mo, session);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 42:  // BasicConfig/BasicConfiguration/basic_create_association
       {
         try {
           BasicConfig.MOidpair fromMO = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.MOAssociation associations[] = BasicConfig.MOAssociationSeqHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.basic_create_association (fromMO, associations, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.AlreadyDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.AlreadyDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 43:  // BasicConfig/BasicConfiguration/basic_delete_association
       {
         try {
           BasicConfig.MOidpair fromMO = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.MOAssociation associations[] = BasicConfig.MOAssociationSeqHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.basic_delete_association (fromMO, associations, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 44:  // BasicConfig/BasicConfiguration/basic_lock_MO
       {
         try {
           BasicConfig.MOidpair mo = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.basic_lock_MO (mo, mg, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.AlreadyDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.AlreadyDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 45:  // BasicConfig/BasicConfiguration/basic_unlock_MO
       {
         try {
           BasicConfig.MOidpair mo = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.basic_unlock_MO (mo, mg, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 46:  // BasicConfig/BasicConfiguration/basic_is_locked_MO
       {
         try {
           BasicConfig.MOidpair mo = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.MGRef mg = BasicConfig.MGRefHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           boolean $result = false;
           $result = this.basic_is_locked_MO (mo, mg, session);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /**
       * Methods on a MO
       */
       case 47:  // BasicConfig/BasicConfiguration/basic_get_MO_info
       {
         try {
           BasicConfig.MOidpair mo = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.MOInfo $result = null;
           $result = this.basic_get_MO_info (mo, session);
           out = $rh.createReply();
           BasicConfig.MOInfoHelper.write (out, $result);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 48:  // BasicConfig/BasicConfiguration/basic_get_MO_parent
       {
         try {
           BasicConfig.MOidpair mo = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           BasicConfig.MORef $result = null;
           $result = this.basic_get_MO_parent (mo, session);
           out = $rh.createReply();
           BasicConfig.MORefHelper.write (out, $result);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 49:  // BasicConfig/BasicConfiguration/basic_get_MO_attributes
       {
         try {
           BasicConfig.MOidpair mo = BasicConfig.MOidpairHelper.read (in);
           String attributeNames[] = BasicConfig.AttributeNameSeqHelper.read (in);
           BasicConfig.NameValueSeqHolder attributes = new BasicConfig.NameValueSeqHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.basic_get_MO_attributes (mo, attributeNames, attributes, session);
           out = $rh.createReply();
           BasicConfig.AttributeSeqHelper.write (out, attributes.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 50:  // BasicConfig/BasicConfiguration/basic_set_MO_attributes
       {
         try {
           BasicConfig.MOidpair mo = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.NameValue attributes[] = BasicConfig.AttributeSeqHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.basic_set_MO_attributes (mo, attributes, session);
           out = $rh.createReply();
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.NotAccepted $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotAcceptedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 51:  // BasicConfig/BasicConfiguration/action
       {
         try {
           BasicConfig.MOidpair mo = BasicConfig.MOidpairHelper.read (in);
           String name = BasicConfig.ActionNameHelper.read (in);
           BasicConfig.NameValueSeqHolder parameters = new BasicConfig.NameValueSeqHolder ();
           parameters.value = BasicConfig.ParameterSeqHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           org.omg.CORBA.Any $result = null;
           $result = this.action (mo, name, parameters, session);
           out = $rh.createReply();
           out.write_any ($result);
           BasicConfig.ParameterSeqHelper.write (out, parameters.value);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.NotAccepted $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotAcceptedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 52:  // BasicConfig/BasicConfiguration/convert_MO
       {
         try {
           BasicConfig.MOidpair mo = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.ManagedObject $result = null;
           $result = this.convert_MO (mo);
           out = $rh.createReply();
           BasicConfig.ManagedObjectHelper.write (out, $result);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.NotAccepted $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotAcceptedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 53:  // BasicConfig/BasicConfiguration/convert_MOs
       {
         try {
           BasicConfig.MOidpair mos[] = BasicConfig.MOidpairSeqHelper.read (in);
           BasicConfig.ManagedObject $result[] = null;
           $result = this.convert_MOs (mos);
           out = $rh.createReply();
           BasicConfig.ManagedObjectSeqHelper.write (out, $result);
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.NotAccepted $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotAcceptedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /**
       * Methods for the iterator.
       */
       case 54:  // BasicConfig/BasicConfiguration/next_MO
       {
         try {
           BasicConfig.IterRef iterator = BasicConfig.IterRefHelper.read (in);
           BasicConfig.MORefHolder mo = new BasicConfig.MORefHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           boolean $result = false;
           $result = this.next_MO (iterator, mo, session);
           out = $rh.createReply();
           out.write_boolean ($result);
           BasicConfig.MORefHelper.write (out, mo.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 55:  // BasicConfig/BasicConfiguration/next_MOs
       {
         try {
           BasicConfig.IterRef iterator = BasicConfig.IterRefHelper.read (in);
           int howMany = in.read_ulong ();
           BasicConfig.MORefSeqHolder mos = new BasicConfig.MORefSeqHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           boolean $result = false;
           $result = this.next_MOs (iterator, howMany, mos, session);
           out = $rh.createReply();
           out.write_boolean ($result);
           BasicConfig.MORefSeqHelper.write (out, mos.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 56:  // BasicConfig/BasicConfiguration/all_MOs
       {
         try {
           BasicConfig.IterRef iterator = BasicConfig.IterRefHelper.read (in);
           BasicConfig.MORefSeqHolder mos = new BasicConfig.MORefSeqHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           boolean $result = false;
           $result = this.all_MOs (iterator, mos, session);
           out = $rh.createReply();
           out.write_boolean ($result);
           BasicConfig.MORefSeqHelper.write (out, mos.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 57:  // BasicConfig/BasicConfiguration/delete_Iter
       {
         try {
           BasicConfig.IterRef iterator = BasicConfig.IterRefHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.delete_Iter (iterator, session);
           out = $rh.createReply();
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /**
       * Methods for the extended iterator.
       */
       case 58:  // BasicConfig/BasicConfiguration/ext_next_MO
       {
         try {
           BasicConfig.ExtIterRef iterator = BasicConfig.ExtIterRefHelper.read (in);
           BasicConfig.ExtMORefHolder mo = new BasicConfig.ExtMORefHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           boolean $result = false;
           $result = this.ext_next_MO (iterator, mo, session);
           out = $rh.createReply();
           out.write_boolean ($result);
           BasicConfig.ExtMORefHelper.write (out, mo.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 59:  // BasicConfig/BasicConfiguration/ext_next_MOs
       {
         try {
           BasicConfig.ExtIterRef iterator = BasicConfig.ExtIterRefHelper.read (in);
           int howMany = in.read_ulong ();
           BasicConfig.ExtMORefSeqHolder mos = new BasicConfig.ExtMORefSeqHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           boolean $result = false;
           $result = this.ext_next_MOs (iterator, howMany, mos, session);
           out = $rh.createReply();
           out.write_boolean ($result);
           BasicConfig.ExtMORefSeqHelper.write (out, mos.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 60:  // BasicConfig/BasicConfiguration/ext_all_MOs
       {
         try {
           BasicConfig.ExtIterRef iterator = BasicConfig.ExtIterRefHelper.read (in);
           BasicConfig.ExtMORefSeqHolder mos = new BasicConfig.ExtMORefSeqHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           boolean $result = false;
           $result = this.ext_all_MOs (iterator, mos, session);
           out = $rh.createReply();
           out.write_boolean ($result);
           BasicConfig.ExtMORefSeqHelper.write (out, mos.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 61:  // BasicConfig/BasicConfiguration/ext_delete_Iter
       {
         try {
           BasicConfig.ExtIterRef iterator = BasicConfig.ExtIterRefHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.ext_delete_Iter (iterator, session);
           out = $rh.createReply();
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /**
       * Methods for the attribute iterator.
       */
       case 62:  // BasicConfig/BasicConfiguration/attr_next_MO
       {
         try {
           BasicConfig.AttrIterRef iterator = BasicConfig.AttrIterRefHelper.read (in);
           BasicConfig.AttrMORefHolder mo = new BasicConfig.AttrMORefHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           boolean $result = false;
           $result = this.attr_next_MO (iterator, mo, session);
           out = $rh.createReply();
           out.write_boolean ($result);
           BasicConfig.AttrMORefHelper.write (out, mo.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 63:  // BasicConfig/BasicConfiguration/attr_next_MOs
       {
         try {
           BasicConfig.AttrIterRef iterator = BasicConfig.AttrIterRefHelper.read (in);
           int howMany = in.read_ulong ();
           BasicConfig.AttrMORefSeqHolder mos = new BasicConfig.AttrMORefSeqHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           boolean $result = false;
           $result = this.attr_next_MOs (iterator, howMany, mos, session);
           out = $rh.createReply();
           out.write_boolean ($result);
           BasicConfig.AttrMORefSeqHelper.write (out, mos.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 64:  // BasicConfig/BasicConfiguration/attr_all_MOs
       {
         try {
           BasicConfig.AttrIterRef iterator = BasicConfig.AttrIterRefHelper.read (in);
           BasicConfig.AttrMORefSeqHolder mos = new BasicConfig.AttrMORefSeqHolder ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           boolean $result = false;
           $result = this.attr_all_MOs (iterator, mos, session);
           out = $rh.createReply();
           out.write_boolean ($result);
           BasicConfig.AttrMORefSeqHelper.write (out, mos.value);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 65:  // BasicConfig/BasicConfiguration/attr_delete_Iter
       {
         try {
           BasicConfig.AttrIterRef iterator = BasicConfig.AttrIterRefHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.attr_delete_Iter (iterator, session);
           out = $rh.createReply();
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /**
       * QoS
       */
       case 66:  // BasicConfig/BasicConfiguration/get_QoS
       {
         BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
         short $result[] = null;
         $result = this.get_QoS (session);
         out = $rh.createReply();
         BasicConfig.QoSListHelper.write (out, $result);
         break;
       }

       case 67:  // BasicConfig/BasicConfiguration/set_QoS
       {
         try {
           short newQoS[] = BasicConfig.QoSListHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           short $result[] = null;
           $result = this.set_QoS (newQoS, session);
           out = $rh.createReply();
           BasicConfig.QoSListHelper.write (out, $result);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 68:  // BasicConfig/BasicConfiguration/supported_QoS
       {
         try {
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           short $result[] = null;
           $result = this.supported_QoS (session);
           out = $rh.createReply();
           BasicConfig.QoSListHelper.write (out, $result);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }


  /**
       * Hoppers and Soft Links
       */
       case 69:  // BasicConfig/BasicConfiguration/create_hopper
       {
         try {
           BasicConfig.MOidpair sourceMO = BasicConfig.MOidpairHelper.read (in);
           CosNaming.NameComponent targetMO[] = BasicConfig.DNameHelper.read (in);
           String targetMIB = BasicConfig.MIBNameHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.create_hopper (sourceMO, targetMO, targetMIB, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.AlreadyDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.AlreadyDefinedHelper.write (out, $ex);
         } catch (BasicConfig.NotAccepted $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotAcceptedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 70:  // BasicConfig/BasicConfiguration/delete_hopper
       {
         try {
           BasicConfig.MOidpair sourceMO = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.MOidpair targetMO = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.delete_hopper (sourceMO, targetMO, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 71:  // BasicConfig/BasicConfiguration/create_association_hopper
       {
         try {
           BasicConfig.MOidpair sourceMO = BasicConfig.MOidpairHelper.read (in);
           CosNaming.NameComponent targetMO[] = BasicConfig.DNameHelper.read (in);
           String targetMIB = BasicConfig.MIBNameHelper.read (in);
           String roleName = in.read_string ();
           String relName = in.read_string ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.create_association_hopper (sourceMO, targetMO, targetMIB, roleName, relName, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.AlreadyDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.AlreadyDefinedHelper.write (out, $ex);
         } catch (BasicConfig.NotAccepted $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotAcceptedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 72:  // BasicConfig/BasicConfiguration/delete_association_hopper
       {
         try {
           BasicConfig.MOidpair sourceMO = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.MOidpair targetMO = BasicConfig.MOidpairHelper.read (in);
           String roleName = in.read_string ();
           String relName = in.read_string ();
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.delete_association_hopper (sourceMO, targetMO, roleName, relName, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 73:  // BasicConfig/BasicConfiguration/create_softlink
       {
         try {
           BasicConfig.MOidpair sourceMO = BasicConfig.MOidpairHelper.read (in);
           CosNaming.NameComponent targetMO[] = BasicConfig.DNameHelper.read (in);
           String targetMIB = BasicConfig.MIBNameHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.create_softlink (sourceMO, targetMO, targetMIB, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.AlreadyDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.AlreadyDefinedHelper.write (out, $ex);
         } catch (BasicConfig.NotAccepted $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotAcceptedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       case 74:  // BasicConfig/BasicConfiguration/delete_softlink
       {
         try {
           BasicConfig.MOidpair sourceMO = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.MOidpair targetMO = BasicConfig.MOidpairHelper.read (in);
           BasicConfig.Session session = BasicConfig.SessionHelper.read (in);
           this.delete_softlink (sourceMO, targetMO, session);
           out = $rh.createReply();
         } catch (BasicConfig.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.UnsupportedQoSHelper.write (out, $ex);
         } catch (BasicConfig.NotDefined $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.NotDefinedHelper.write (out, $ex);
         } catch (BasicConfig.SecurityViolation $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.SecurityViolationHelper.write (out, $ex);
         } catch (BasicConfig.ProcessingFailure $ex) {
           out = $rh.createExceptionReply ();
           BasicConfig.ProcessingFailureHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ConfigExtended/ConfigurationExtended:1.0", 
    "IDL:BasicConfig/BasicConfiguration:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public ConfigurationExtended _this() 
  {
    return ConfigurationExtendedHelper.narrow(
    super._this_object());
  }

  public ConfigurationExtended _this(org.omg.CORBA.ORB orb) 
  {
    return ConfigurationExtendedHelper.narrow(
    super._this_object(orb));
  }


} // class ConfigurationExtendedPOA
