package BasicConfig;


/**
* BasicConfig/_ManagedObjectStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from configuration_K.idl
* Tuesday, May 22, 2018 12:36:12 PM GMT+01:00
*/


/**
   * Interface for fine grain solution
   */
public class _ManagedObjectStub extends org.omg.CORBA.portable.ObjectImpl implements BasicConfig.ManagedObject
{

  public void set (CosNaming.NameComponent[] mo, BasicConfig.NameValue[] attributes, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("set", true);
                BasicConfig.DNameHelper.write ($out, mo);
                BasicConfig.AttributeSeqHelper.write ($out, attributes);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                set (mo, attributes, session        );
            } finally {
                _releaseReply ($in);
            }
  } // set

  public void get (CosNaming.NameComponent[] mo, String[] attributeNames, BasicConfig.NameValueSeqHolder attributes, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get", true);
                BasicConfig.DNameHelper.write ($out, mo);
                BasicConfig.AttributeNameSeqHelper.write ($out, attributeNames);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                attributes.value = BasicConfig.AttributeSeqHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                get (mo, attributeNames, attributes, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get

  public BasicConfig.MOidpair get_parent (CosNaming.NameComponent[] mo, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_parent", true);
                BasicConfig.DNameHelper.write ($out, mo);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MOidpair $result = BasicConfig.MOidpairHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_parent (mo, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_parent

  public BasicConfig.MOidpair[] get_containment (CosNaming.NameComponent[] mo, int scope, BasicConfig.Session session) throws BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_containment", true);
                BasicConfig.DNameHelper.write ($out, mo);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MOidpair $result[] = BasicConfig.MOidpairSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_containment (mo, scope, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_containment

  public BasicConfig.MOidpair[] get_association (CosNaming.NameComponent[] mo, String roleName, int scope, BasicConfig.Session session) throws BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_association", true);
                BasicConfig.DNameHelper.write ($out, mo);
                $out.write_string (roleName);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MOidpair $result[] = BasicConfig.MOidpairSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_association (mo, roleName, scope, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_association

  public org.omg.CORBA.Any action (CosNaming.NameComponent[] mo, String name, BasicConfig.NameValueSeqHolder parameters, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("action", true);
                BasicConfig.DNameHelper.write ($out, mo);
                BasicConfig.ActionNameHelper.write ($out, name);
                BasicConfig.ParameterSeqHelper.write ($out, parameters.value);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                org.omg.CORBA.Any $result = $in.read_any ();
                parameters.value = BasicConfig.ParameterSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return action (mo, name, parameters, session        );
            } finally {
                _releaseReply ($in);
            }
  } // action

  public BasicConfig.MOInfo get_info (CosNaming.NameComponent[] mo, BasicConfig.Session session) throws BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_info", true);
                BasicConfig.DNameHelper.write ($out, mo);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MOInfo $result = BasicConfig.MOInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_info (mo, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_info

  public void lock (CosNaming.NameComponent[] mo, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.AlreadyDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("lock", true);
                BasicConfig.DNameHelper.write ($out, mo);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/AlreadyDefined:1.0"))
                    throw BasicConfig.AlreadyDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                lock (mo, session        );
            } finally {
                _releaseReply ($in);
            }
  } // lock

  public void unlock (CosNaming.NameComponent[] mo, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unlock", true);
                BasicConfig.DNameHelper.write ($out, mo);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                unlock (mo, session        );
            } finally {
                _releaseReply ($in);
            }
  } // unlock

  public boolean is_locked (CosNaming.NameComponent[] mo, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("is_locked", true);
                BasicConfig.DNameHelper.write ($out, mo);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return is_locked (mo, session        );
            } finally {
                _releaseReply ($in);
            }
  } // is_locked

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:BasicConfig/ManagedObject:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _ManagedObjectStub
