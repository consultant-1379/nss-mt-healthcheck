package se.ericsson.cello.LogAdmin;


/**
* se/ericsson/cello/LogAdmin/_LogStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from LogAdmin_F.idl
* Wednesday, July 11, 2018 2:25:14 PM GMT+01:00
*/


//  The Log interface supports the following functions.
public class _LogStub extends org.omg.CORBA.portable.ObjectImpl implements se.ericsson.cello.LogAdmin.Log
{


  //       function.
  public se.ericsson.cello.LogAdmin.OperationalState get_operational_state ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_operational_state", true);
                $in = _invoke ($out);
                se.ericsson.cello.LogAdmin.OperationalState $result = se.ericsson.cello.LogAdmin.OperationalStateHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_operational_state (        );
            } finally {
                _releaseReply ($in);
            }
  } // get_operational_state


  //       Returns a struct that reflects the availability status of a log.
  public se.ericsson.cello.LogAdmin.AvailabilityStatus get_availability_status ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_availability_status", true);
                $in = _invoke ($out);
                se.ericsson.cello.LogAdmin.AvailabilityStatus $result = se.ericsson.cello.LogAdmin.AvailabilityStatusHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_availability_status (        );
            } finally {
                _releaseReply ($in);
            }
  } // get_availability_status


  //       Return the name of the log.
  public String get_name ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_name", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_name (        );
            } finally {
                _releaseReply ($in);
            }
  } // get_name


  //       In parameter filter defines the filter of a log.
  public void set_filter (String filter)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("set_filter", true);
                se.ericsson.cello.LogAdmin.ConstraintHelper.write ($out, filter);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                set_filter (filter        );
            } finally {
                _releaseReply ($in);
            }
  } // set_filter


  //       the log.
  public se.ericsson.cello.LogAdmin.QoSType get_qos ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_qos", true);
                $in = _invoke ($out);
                se.ericsson.cello.LogAdmin.QoSType $result = se.ericsson.cello.LogAdmin.QoSTypeHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_qos (        );
            } finally {
                _releaseReply ($in);
            }
  } // get_qos


  //       log.
  public void set_qos (se.ericsson.cello.LogAdmin.QoSType qos)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("set_qos", true);
                se.ericsson.cello.LogAdmin.QoSTypeHelper.write ($out, qos);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                set_qos (qos        );
            } finally {
                _releaseReply ($in);
            }
  } // set_qos


  //       Returns the size of the log.
  public long get_max_size ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_max_size", true);
                $in = _invoke ($out);
                long $result = $in.read_ulonglong ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_max_size (        );
            } finally {
                _releaseReply ($in);
            }
  } // get_max_size


  //       size, an NoMemory exception will be raised.
  public void set_max_size (long size) throws se.ericsson.cello.LogAdmin.NoMemory
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("set_max_size", true);
                $out.write_ulonglong (size);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:se/ericsson/cello/LogAdmin/NoMemory:1.0"))
                    throw se.ericsson.cello.LogAdmin.NoMemoryHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                set_max_size (size        );
            } finally {
                _releaseReply ($in);
            }
  } // set_max_size


  //       maximum size of the log has been reached.
  public se.ericsson.cello.LogAdmin.LogFullAction get_log_full_action ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_log_full_action", true);
                $in = _invoke ($out);
                se.ericsson.cello.LogAdmin.LogFullAction $result = se.ericsson.cello.LogAdmin.LogFullActionHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_log_full_action (        );
            } finally {
                _releaseReply ($in);
            }
  } // get_log_full_action


  //       In parameter action indicates the log full condition.
  public void set_log_full_action (se.ericsson.cello.LogAdmin.LogFullAction action)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("set_log_full_action", true);
                se.ericsson.cello.LogAdmin.LogFullActionHelper.write ($out, action);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                set_log_full_action (action        );
            } finally {
                _releaseReply ($in);
            }
  } // set_log_full_action


  //       exception is raised.
  public se.ericsson.cello.LogAdmin.LogRecord[] query (String filter, se.ericsson.cello.LogAdmin.IteratorHolder iter) throws se.ericsson.cello.LogAdmin.InvalidConstraint
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("query", true);
                se.ericsson.cello.LogAdmin.ConstraintHelper.write ($out, filter);
                $in = _invoke ($out);
                se.ericsson.cello.LogAdmin.LogRecord $result[] = se.ericsson.cello.LogAdmin.RecordListHelper.read ($in);
                iter.value = se.ericsson.cello.LogAdmin.IteratorHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:se/ericsson/cello/LogAdmin/InvalidConstraint:1.0"))
                    throw se.ericsson.cello.LogAdmin.InvalidConstraintHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return query (filter, iter        );
            } finally {
                _releaseReply ($in);
            }
  } // query


  //       If the iterator is not needed a nil object reference is returned.
  public se.ericsson.cello.LogAdmin.LogRecord[] retrieve (se.ericsson.cello.LogAdmin.TimeT from_time, int how_many, se.ericsson.cello.LogAdmin.IteratorHolder iter)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("retrieve", true);
                se.ericsson.cello.LogAdmin.TimeTHelper.write ($out, from_time);
                $out.write_long (how_many);
                $in = _invoke ($out);
                se.ericsson.cello.LogAdmin.LogRecord $result[] = se.ericsson.cello.LogAdmin.RecordListHelper.read ($in);
                iter.value = se.ericsson.cello.LogAdmin.IteratorHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return retrieve (from_time, how_many, iter        );
            } finally {
                _releaseReply ($in);
            }
  } // retrieve


  //       returned with the exception.
  public void write_records (CosNotification.StructuredEvent[] records) throws se.ericsson.cello.LogAdmin.LogFull
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("write_records", true);
                CosNotification.EventBatchHelper.write ($out, records);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:se/ericsson/cello/LogAdmin/LogFull:1.0"))
                    throw se.ericsson.cello.LogAdmin.LogFullHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                write_records (records        );
            } finally {
                _releaseReply ($in);
            }
  } // write_records


  //       deleted, the operation returns a value of 0.
  public int delete_records_by_id (long[] ids)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delete_records_by_id", true);
                se.ericsson.cello.LogAdmin.RecordIdListHelper.write ($out, ids);
                $in = _invoke ($out);
                int $result = $in.read_ulong ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return delete_records_by_id (ids        );
            } finally {
                _releaseReply ($in);
            }
  } // delete_records_by_id


  //       Destroy the log.
  public boolean destroy_log ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("destroy_log", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return destroy_log (        );
            } finally {
                _releaseReply ($in);
            }
  } // destroy_log

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:se/ericsson/cello/LogAdmin/Log:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _LogStub
