package AlarmIRPSystem;


/**
* AlarmIRPSystem/AlarmInformationIteratorPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from AlarmIRPSystem_F.idl
* Wednesday, July 11, 2018 2:25:06 PM GMT+01:00
*/


/**
    The AlarmInformationIterator is used to iterate through a set of Alarm
    Informations in Alarm List.  Method get_alarm_list contains it as 
     output parameter.
    IRPManager uses it to pace the return of Alarm Informations. IRPManager
     cannot use it to pace when IRPAgent should retrieve Alarm Informations
     from Alarm List.
    */
public abstract class AlarmInformationIteratorPOA extends org.omg.PortableServer.Servant
 implements AlarmIRPSystem.AlarmInformationIteratorOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("next_alarmInformations", new java.lang.Integer (0));
    _methods.put ("destroy", new java.lang.Integer (1));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
          This method returns up to "how_many" Alarm Informations.
          If 1 or more Alarm Information is returned, return TRUE.
          Return FALSE if there is no more Alarm Information to be returned.
          */
       case 0:  // AlarmIRPSystem/AlarmInformationIterator/next_alarmInformations
       {
         try {
           int how_many = in.read_ulong ();
           CosNotification.EventBatchHolder alarm_informations = new CosNotification.EventBatchHolder ();
           boolean $result = false;
           $result = this.next_alarmInformations (how_many, alarm_informations);
           out = $rh.createReply();
           out.write_boolean ($result);
           AlarmIRPConstDefs.AlarmInformationSeqHelper.write (out, alarm_informations.value);
         } catch (AlarmIRPSystem.NextAlarmInformations $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.NextAlarmInformationsHelper.write (out, $ex);
         } catch (AlarmIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /**
          This method destroys the iterator.
          */
       case 1:  // AlarmIRPSystem/AlarmInformationIterator/destroy
       {
         this.destroy ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:3gppsa5.org/AlarmIRPSystem/AlarmInformationIterator:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public AlarmInformationIterator _this() 
  {
    return AlarmInformationIteratorHelper.narrow(
    super._this_object());
  }

  public AlarmInformationIterator _this(org.omg.CORBA.ORB orb) 
  {
    return AlarmInformationIteratorHelper.narrow(
    super._this_object(orb));
  }


} // class AlarmInformationIteratorPOA
