package se.ericsson.cello.LogAdmin;


/**
* se/ericsson/cello/LogAdmin/LogPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from LogAdmin_F.idl
* Wednesday, July 11, 2018 2:25:14 PM GMT+01:00
*/


//  The Log interface supports the following functions.
public abstract class LogPOA extends org.omg.PortableServer.Servant
 implements se.ericsson.cello.LogAdmin.LogOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("get_operational_state", new java.lang.Integer (0));
    _methods.put ("get_availability_status", new java.lang.Integer (1));
    _methods.put ("get_name", new java.lang.Integer (2));
    _methods.put ("set_filter", new java.lang.Integer (3));
    _methods.put ("get_qos", new java.lang.Integer (4));
    _methods.put ("set_qos", new java.lang.Integer (5));
    _methods.put ("get_max_size", new java.lang.Integer (6));
    _methods.put ("set_max_size", new java.lang.Integer (7));
    _methods.put ("get_log_full_action", new java.lang.Integer (8));
    _methods.put ("set_log_full_action", new java.lang.Integer (9));
    _methods.put ("query", new java.lang.Integer (10));
    _methods.put ("retrieve", new java.lang.Integer (11));
    _methods.put ("write_records", new java.lang.Integer (12));
    _methods.put ("delete_records_by_id", new java.lang.Integer (13));
    _methods.put ("destroy_log", new java.lang.Integer (14));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  //       function.
       case 0:  // se/ericsson/cello/LogAdmin/Log/get_operational_state
       {
         se.ericsson.cello.LogAdmin.OperationalState $result = null;
         $result = this.get_operational_state ();
         out = $rh.createReply();
         se.ericsson.cello.LogAdmin.OperationalStateHelper.write (out, $result);
         break;
       }


  //       Returns a struct that reflects the availability status of a log.
       case 1:  // se/ericsson/cello/LogAdmin/Log/get_availability_status
       {
         se.ericsson.cello.LogAdmin.AvailabilityStatus $result = null;
         $result = this.get_availability_status ();
         out = $rh.createReply();
         se.ericsson.cello.LogAdmin.AvailabilityStatusHelper.write (out, $result);
         break;
       }


  //       Return the name of the log.
       case 2:  // se/ericsson/cello/LogAdmin/Log/get_name
       {
         String $result = null;
         $result = this.get_name ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  //       In parameter filter defines the filter of a log.
       case 3:  // se/ericsson/cello/LogAdmin/Log/set_filter
       {
         String filter = se.ericsson.cello.LogAdmin.ConstraintHelper.read (in);
         this.set_filter (filter);
         out = $rh.createReply();
         break;
       }


  //       the log.
       case 4:  // se/ericsson/cello/LogAdmin/Log/get_qos
       {
         se.ericsson.cello.LogAdmin.QoSType $result = null;
         $result = this.get_qos ();
         out = $rh.createReply();
         se.ericsson.cello.LogAdmin.QoSTypeHelper.write (out, $result);
         break;
       }


  //       log.
       case 5:  // se/ericsson/cello/LogAdmin/Log/set_qos
       {
         se.ericsson.cello.LogAdmin.QoSType qos = se.ericsson.cello.LogAdmin.QoSTypeHelper.read (in);
         this.set_qos (qos);
         out = $rh.createReply();
         break;
       }


  //       Returns the size of the log.
       case 6:  // se/ericsson/cello/LogAdmin/Log/get_max_size
       {
         long $result = (long)0;
         $result = this.get_max_size ();
         out = $rh.createReply();
         out.write_ulonglong ($result);
         break;
       }


  //       size, an NoMemory exception will be raised.
       case 7:  // se/ericsson/cello/LogAdmin/Log/set_max_size
       {
         try {
           long size = in.read_ulonglong ();
           this.set_max_size (size);
           out = $rh.createReply();
         } catch (se.ericsson.cello.LogAdmin.NoMemory $ex) {
           out = $rh.createExceptionReply ();
           se.ericsson.cello.LogAdmin.NoMemoryHelper.write (out, $ex);
         }
         break;
       }


  //       maximum size of the log has been reached.
       case 8:  // se/ericsson/cello/LogAdmin/Log/get_log_full_action
       {
         se.ericsson.cello.LogAdmin.LogFullAction $result = null;
         $result = this.get_log_full_action ();
         out = $rh.createReply();
         se.ericsson.cello.LogAdmin.LogFullActionHelper.write (out, $result);
         break;
       }


  //       In parameter action indicates the log full condition.
       case 9:  // se/ericsson/cello/LogAdmin/Log/set_log_full_action
       {
         se.ericsson.cello.LogAdmin.LogFullAction action = se.ericsson.cello.LogAdmin.LogFullActionHelper.read (in);
         this.set_log_full_action (action);
         out = $rh.createReply();
         break;
       }


  //       exception is raised.
       case 10:  // se/ericsson/cello/LogAdmin/Log/query
       {
         try {
           String filter = se.ericsson.cello.LogAdmin.ConstraintHelper.read (in);
           se.ericsson.cello.LogAdmin.IteratorHolder iter = new se.ericsson.cello.LogAdmin.IteratorHolder ();
           se.ericsson.cello.LogAdmin.LogRecord $result[] = null;
           $result = this.query (filter, iter);
           out = $rh.createReply();
           se.ericsson.cello.LogAdmin.RecordListHelper.write (out, $result);
           se.ericsson.cello.LogAdmin.IteratorHelper.write (out, iter.value);
         } catch (se.ericsson.cello.LogAdmin.InvalidConstraint $ex) {
           out = $rh.createExceptionReply ();
           se.ericsson.cello.LogAdmin.InvalidConstraintHelper.write (out, $ex);
         }
         break;
       }


  //       If the iterator is not needed a nil object reference is returned.
       case 11:  // se/ericsson/cello/LogAdmin/Log/retrieve
       {
         se.ericsson.cello.LogAdmin.TimeT from_time = se.ericsson.cello.LogAdmin.TimeTHelper.read (in);
         int how_many = in.read_long ();
         se.ericsson.cello.LogAdmin.IteratorHolder iter = new se.ericsson.cello.LogAdmin.IteratorHolder ();
         se.ericsson.cello.LogAdmin.LogRecord $result[] = null;
         $result = this.retrieve (from_time, how_many, iter);
         out = $rh.createReply();
         se.ericsson.cello.LogAdmin.RecordListHelper.write (out, $result);
         se.ericsson.cello.LogAdmin.IteratorHelper.write (out, iter.value);
         break;
       }


  //       returned with the exception.
       case 12:  // se/ericsson/cello/LogAdmin/Log/write_records
       {
         try {
           CosNotification.StructuredEvent records[] = CosNotification.EventBatchHelper.read (in);
           this.write_records (records);
           out = $rh.createReply();
         } catch (se.ericsson.cello.LogAdmin.LogFull $ex) {
           out = $rh.createExceptionReply ();
           se.ericsson.cello.LogAdmin.LogFullHelper.write (out, $ex);
         }
         break;
       }


  //       deleted, the operation returns a value of 0.
       case 13:  // se/ericsson/cello/LogAdmin/Log/delete_records_by_id
       {
         long ids[] = se.ericsson.cello.LogAdmin.RecordIdListHelper.read (in);
         int $result = (int)0;
         $result = this.delete_records_by_id (ids);
         out = $rh.createReply();
         out.write_ulong ($result);
         break;
       }


  //       Destroy the log.
       case 14:  // se/ericsson/cello/LogAdmin/Log/destroy_log
       {
         boolean $result = false;
         $result = this.destroy_log ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:se/ericsson/cello/LogAdmin/Log:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Log _this() 
  {
    return LogHelper.narrow(
    super._this_object());
  }

  public Log _this(org.omg.CORBA.ORB orb) 
  {
    return LogHelper.narrow(
    super._this_object(orb));
  }


} // class LogPOA
