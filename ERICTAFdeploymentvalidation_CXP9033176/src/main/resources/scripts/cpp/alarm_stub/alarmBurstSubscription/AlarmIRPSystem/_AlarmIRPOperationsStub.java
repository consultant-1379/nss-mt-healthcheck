package AlarmIRPSystem;


/**
* AlarmIRPSystem/_AlarmIRPOperationsStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from AlarmIRPSystem_F.idl
* Wednesday, July 11, 2018 2:25:07 PM GMT+01:00
*/


/*
  This interface specifies all methods supported by System as
	specified in 3GPP AlarmIRP: CORBA Solution Set version 1:1.
  */
public class _AlarmIRPOperationsStub extends org.omg.CORBA.portable.ObjectImpl implements AlarmIRPSystem.AlarmIRPOperations
{

  public CommonIRPConstDefs.Signal acknowledge_alarms (String[] alarm_information_id_list, String ack_user_id, String ack_system_id, AlarmIRPConstDefs.AlarmInformationIdSeqHolder bad_alarm_information_id_list) throws AlarmIRPSystem.AcknowledgeAlarms, AlarmIRPSystem.ParameterNotSupported, AlarmIRPSystem.InvalidParameter
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("acknowledge_alarms", true);
                AlarmIRPConstDefs.AlarmInformationIdSeqHelper.write ($out, alarm_information_id_list);
                $out.write_string (ack_user_id);
                $out.write_string (ack_system_id);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                bad_alarm_information_id_list.value = AlarmIRPConstDefs.AlarmInformationIdSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/AcknowledgeAlarms:1.0"))
                    throw AlarmIRPSystem.AcknowledgeAlarmsHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/ParameterNotSupported:1.0"))
                    throw AlarmIRPSystem.ParameterNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/InvalidParameter:1.0"))
                    throw AlarmIRPSystem.InvalidParameterHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return acknowledge_alarms (alarm_information_id_list, ack_user_id, ack_system_id, bad_alarm_information_id_list        );
            } finally {
                _releaseReply ($in);
            }
  } // acknowledge_alarms

  public CommonIRPConstDefs.Signal unacknowledge_alarms (String[] alarm_information_id_list, String ack_user_id, String ack_system_id, AlarmIRPConstDefs.AlarmInformationIdSeqHolder bad_alarm_information_id_list) throws AlarmIRPSystem.UnacknowledgeAlarms, AlarmIRPSystem.OperationNotSupported, AlarmIRPSystem.ParameterNotSupported, AlarmIRPSystem.InvalidParameter
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unacknowledge_alarms", true);
                AlarmIRPConstDefs.AlarmInformationIdSeqHelper.write ($out, alarm_information_id_list);
                $out.write_string (ack_user_id);
                $out.write_string (ack_system_id);
                $in = _invoke ($out);
                CommonIRPConstDefs.Signal $result = CommonIRPConstDefs.SignalHelper.read ($in);
                bad_alarm_information_id_list.value = AlarmIRPConstDefs.AlarmInformationIdSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/UnacknowledgeAlarms:1.0"))
                    throw AlarmIRPSystem.UnacknowledgeAlarmsHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/OperationNotSupported:1.0"))
                    throw AlarmIRPSystem.OperationNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/ParameterNotSupported:1.0"))
                    throw AlarmIRPSystem.ParameterNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/InvalidParameter:1.0"))
                    throw AlarmIRPSystem.InvalidParameterHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return unacknowledge_alarms (alarm_information_id_list, ack_user_id, ack_system_id, bad_alarm_information_id_list        );
            } finally {
                _releaseReply ($in);
            }
  } // unacknowledge_alarms


  /*
       This method returns Alarm Informations.
       If flag is TRUE, all returned Alarm Informations shall be
       in AlarmInformationSeq that contains 0,1 or more Alarm Informations.
       Output parameter iter shall be useless.
       If flag is FALSE, no Alarm Informations shall be in AlarmInformationSeq.
       IRPAgent needs to use iter to retrieve them.
       */
  public CosNotification.StructuredEvent[] get_alarm_list (String filter, org.omg.CORBA.BooleanHolder flag, AlarmIRPSystem.AlarmInformationIteratorHolder iter) throws AlarmIRPSystem.GetAlarmList, AlarmIRPSystem.ParameterNotSupported, AlarmIRPSystem.InvalidParameter
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_alarm_list", true);
                $out.write_string (filter);
                $in = _invoke ($out);
                CosNotification.StructuredEvent $result[] = AlarmIRPConstDefs.AlarmInformationSeqHelper.read ($in);
                flag.value = $in.read_boolean ();
                iter.value = AlarmIRPSystem.AlarmInformationIteratorHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/GetAlarmList:1.0"))
                    throw AlarmIRPSystem.GetAlarmListHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/ParameterNotSupported:1.0"))
                    throw AlarmIRPSystem.ParameterNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/InvalidParameter:1.0"))
                    throw AlarmIRPSystem.InvalidParameterHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_alarm_list (filter, flag, iter        );
            } finally {
                _releaseReply ($in);
            }
  } // get_alarm_list

  public void get_alarm_count (String filter, org.omg.CORBA.IntHolder critical_count, org.omg.CORBA.IntHolder major_count, org.omg.CORBA.IntHolder minor_count, org.omg.CORBA.IntHolder warning_count, org.omg.CORBA.IntHolder indeterminate_count, org.omg.CORBA.IntHolder cleared_count) throws AlarmIRPSystem.GetAlarmCount, AlarmIRPSystem.OperationNotSupported, AlarmIRPSystem.ParameterNotSupported, AlarmIRPSystem.InvalidParameter
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_alarm_count", true);
                $out.write_string (filter);
                $in = _invoke ($out);
                critical_count.value = $in.read_long ();
                major_count.value = $in.read_long ();
                minor_count.value = $in.read_long ();
                warning_count.value = $in.read_long ();
                indeterminate_count.value = $in.read_long ();
                cleared_count.value = $in.read_long ();
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/GetAlarmCount:1.0"))
                    throw AlarmIRPSystem.GetAlarmCountHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/OperationNotSupported:1.0"))
                    throw AlarmIRPSystem.OperationNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/ParameterNotSupported:1.0"))
                    throw AlarmIRPSystem.ParameterNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/InvalidParameter:1.0"))
                    throw AlarmIRPSystem.InvalidParameterHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                get_alarm_count (filter, critical_count, major_count, minor_count, warning_count, indeterminate_count, cleared_count        );
            } finally {
                _releaseReply ($in);
            }
  } // get_alarm_count

  public String[] get_alarm_IRP_version () throws AlarmIRPSystem.GetAlarmIRPVersion
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_alarm_IRP_version", true);
                $in = _invoke ($out);
                String $result[] = CommonIRPConstDefs.VersionNumberSetHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/AlarmIRPSystem/GetAlarmIRPVersion:1.0"))
                    throw AlarmIRPSystem.GetAlarmIRPVersionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_alarm_IRP_version (        );
            } finally {
                _releaseReply ($in);
            }
  } // get_alarm_IRP_version

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:3gppsa5.org/AlarmIRPSystem/AlarmIRPOperations:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _AlarmIRPOperationsStub
