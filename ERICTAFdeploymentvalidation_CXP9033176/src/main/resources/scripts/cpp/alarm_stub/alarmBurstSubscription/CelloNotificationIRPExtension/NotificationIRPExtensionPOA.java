package CelloNotificationIRPExtension;


/**
* CelloNotificationIRPExtension/NotificationIRPExtensionPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CelloNotificationIRPExtension_F.idl
* Wednesday, July 11, 2018 2:25:07 PM GMT+01:00
*/


/*
   * This interface extends the Notification IRP with Cello 
   * specific support for filters on subscriptions.
   *
   */
public abstract class NotificationIRPExtensionPOA extends org.omg.PortableServer.Servant
 implements CelloNotificationIRPExtension.NotificationIRPExtensionOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("attach_push_ext", new java.lang.Integer (0));
    _methods.put ("get_subscription_status_ext", new java.lang.Integer (1));
    _methods.put ("change_subscription_filter_ext", new java.lang.Integer (2));
    _methods.put ("attach_push", new java.lang.Integer (3));
    _methods.put ("attach_push_b", new java.lang.Integer (4));
    _methods.put ("attach_pull", new java.lang.Integer (5));
    _methods.put ("detach", new java.lang.Integer (6));
    _methods.put ("get_notification_IRP_version", new java.lang.Integer (7));
    _methods.put ("get_subscription_status", new java.lang.Integer (8));
    _methods.put ("get_subscription_ids", new java.lang.Integer (9));
    _methods.put ("change_subscription_filter", new java.lang.Integer (10));
    _methods.put ("get_notification_categories", new java.lang.Integer (11));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /*
       * Establishes a subscription based on a filter.
       * Alarm and event notifications will be sent to specified object.
       *
       */
       case 0:  // CelloNotificationIRPExtension/NotificationIRPExtension/attach_push_ext
       {
         try {
           org.omg.CORBA.Object manager_reference = org.omg.CORBA.ObjectHelper.read (in);
           int time_tick = in.read_long ();
           String notification_category_set[] = NotificationIRPConstDefs.NotificationCategorySetHelper.read (in);
           CelloNotificationIRPExtension.Filter filter = CelloNotificationIRPExtension.FilterHelper.read (in);
           String $result = null;
           $result = this.attach_push_ext (manager_reference, time_tick, notification_category_set, filter);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (CelloNotificationIRPExtension.AttachPushExt $ex) {
           out = $rh.createExceptionReply ();
           CelloNotificationIRPExtension.AttachPushExtHelper.write (out, $ex);
         } catch (NotificationIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.InvalidParameterHelper.write (out, $ex);
         } catch (NotificationIRPSystem.AlreadySubscribed $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.AlreadySubscribedHelper.write (out, $ex);
         } catch (NotificationIRPSystem.AtLeastOneNotificationCategoryNotSupported $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.AtLeastOneNotificationCategoryNotSupportedHelper.write (out, $ex);
         }
         break;
       }


  /*
       * Returns status information for the specified subscription.
       *
       */
       case 1:  // CelloNotificationIRPExtension/NotificationIRPExtension/get_subscription_status_ext
       {
         try {
           String subscription_id = in.read_string ();
           CelloNotificationIRPExtension.FilterHolder filter_in_effect = new CelloNotificationIRPExtension.FilterHolder ();
           NotificationIRPConstDefs.SubscriptionStateHolder subscription_state = new NotificationIRPConstDefs.SubscriptionStateHolder ();
           org.omg.CORBA.IntHolder time_tick = new org.omg.CORBA.IntHolder ();
           String $result[] = null;
           $result = this.get_subscription_status_ext (subscription_id, filter_in_effect, subscription_state, time_tick);
           out = $rh.createReply();
           NotificationIRPConstDefs.NotificationCategorySetHelper.write (out, $result);
           CelloNotificationIRPExtension.FilterHelper.write (out, filter_in_effect.value);
           NotificationIRPConstDefs.SubscriptionStateHelper.write (out, subscription_state.value);
           out.write_long (time_tick.value);
         } catch (CelloNotificationIRPExtension.GetSubscriptionStatusExt $ex) {
           out = $rh.createExceptionReply ();
           CelloNotificationIRPExtension.GetSubscriptionStatusExtHelper.write (out, $ex);
         } catch (NotificationIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /*
       * Changes the filter attached to the specified subscription.
       *
       */
       case 2:  // CelloNotificationIRPExtension/NotificationIRPExtension/change_subscription_filter_ext
       {
         try {
           String subscription_id = in.read_string ();
           CelloNotificationIRPExtension.Filter filter = CelloNotificationIRPExtension.FilterHelper.read (in);
           this.change_subscription_filter_ext (subscription_id, filter);
           out = $rh.createReply();
         } catch (CelloNotificationIRPExtension.ChangeSubscriptionFilterExt $ex) {
           out = $rh.createExceptionReply ();
           CelloNotificationIRPExtension.ChangeSubscriptionFilterExtHelper.write (out, $ex);
         } catch (NotificationIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /* ## Operation: attach_push
      */
       case 3:  // NotificationIRPSystem/NotificationIRPOperations/attach_push
       {
         try {
           org.omg.CORBA.Object manager_reference = org.omg.CORBA.ObjectHelper.read (in);
           int time_tick = in.read_long ();
           String notification_category_set[] = NotificationIRPConstDefs.NotificationCategorySetHelper.read (in);
           String filter = in.read_string ();
           String $result = null;
           $result = this.attach_push (manager_reference, time_tick, notification_category_set, filter);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (NotificationIRPSystem.Attach $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.AttachHelper.write (out, $ex);
         } catch (NotificationIRPSystem.ParameterNotSupported $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.ParameterNotSupportedHelper.write (out, $ex);
         } catch (NotificationIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.InvalidParameterHelper.write (out, $ex);
         } catch (NotificationIRPSystem.AlreadySubscribed $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.AlreadySubscribedHelper.write (out, $ex);
         } catch (NotificationIRPSystem.AtLeastOneNotificationCategoryNotSupported $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.AtLeastOneNotificationCategoryNotSupportedHelper.write (out, $ex);
         }
         break;
       }


  /* ## Operation: attach_push_b
      */
       case 4:  // NotificationIRPSystem/NotificationIRPOperations/attach_push_b
       {
         try {
           org.omg.CORBA.Object manager_reference = org.omg.CORBA.ObjectHelper.read (in);
           int time_tick = in.read_long ();
           String notification_category_set[] = NotificationIRPConstDefs.NotificationCategorySetHelper.read (in);
           String filter = in.read_string ();
           CosNotifyChannelAdmin.SequenceProxyPushSupplierHolder system_reference = new CosNotifyChannelAdmin.SequenceProxyPushSupplierHolder ();
           String $result = null;
           $result = this.attach_push_b (manager_reference, time_tick, notification_category_set, filter, system_reference);
           out = $rh.createReply();
           out.write_string ($result);
           CosNotifyChannelAdmin.SequenceProxyPushSupplierHelper.write (out, system_reference.value);
         } catch (NotificationIRPSystem.Attach $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.AttachHelper.write (out, $ex);
         } catch (NotificationIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (NotificationIRPSystem.ParameterNotSupported $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.ParameterNotSupportedHelper.write (out, $ex);
         } catch (NotificationIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.InvalidParameterHelper.write (out, $ex);
         } catch (NotificationIRPSystem.AlreadySubscribed $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.AlreadySubscribedHelper.write (out, $ex);
         } catch (NotificationIRPSystem.AtLeastOneNotificationCategoryNotSupported $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.AtLeastOneNotificationCategoryNotSupportedHelper.write (out, $ex);
         }
         break;
       }


  /* ## Operation: attach_pull
      */
       case 5:  // NotificationIRPSystem/NotificationIRPOperations/attach_pull
       {
         try {
           org.omg.CORBA.Object manager_reference = org.omg.CORBA.ObjectHelper.read (in);
           int time_tick = in.read_long ();
           String notification_category_set[] = NotificationIRPConstDefs.NotificationCategorySetHelper.read (in);
           String filter = in.read_string ();
           CosNotifyChannelAdmin.SequenceProxyPullSupplierHolder system_reference = new CosNotifyChannelAdmin.SequenceProxyPullSupplierHolder ();
           String $result = null;
           $result = this.attach_pull (manager_reference, time_tick, notification_category_set, filter, system_reference);
           out = $rh.createReply();
           out.write_string ($result);
           CosNotifyChannelAdmin.SequenceProxyPullSupplierHelper.write (out, system_reference.value);
         } catch (NotificationIRPSystem.Attach $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.AttachHelper.write (out, $ex);
         } catch (NotificationIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (NotificationIRPSystem.ParameterNotSupported $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.ParameterNotSupportedHelper.write (out, $ex);
         } catch (NotificationIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.InvalidParameterHelper.write (out, $ex);
         } catch (NotificationIRPSystem.AlreadySubscribed $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.AlreadySubscribedHelper.write (out, $ex);
         } catch (NotificationIRPSystem.AtLeastOneNotificationCategoryNotSupported $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.AtLeastOneNotificationCategoryNotSupportedHelper.write (out, $ex);
         }
         break;
       }


  /* ## Operation: detach
      */
       case 6:  // NotificationIRPSystem/NotificationIRPOperations/detach
       {
         try {
           org.omg.CORBA.Object manager_reference = org.omg.CORBA.ObjectHelper.read (in);
           String subscription_id = in.read_string ();
           this.detach (manager_reference, subscription_id);
           out = $rh.createReply();
         } catch (NotificationIRPSystem.DetachException $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.DetachExceptionHelper.write (out, $ex);
         } catch (NotificationIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /* ## Operation: get_notification_IRP_version
      */
       case 7:  // NotificationIRPSystem/NotificationIRPOperations/get_notification_IRP_version
       {
         try {
           String $result[] = null;
           $result = this.get_notification_IRP_version ();
           out = $rh.createReply();
           CommonIRPConstDefs.VersionNumberSetHelper.write (out, $result);
         } catch (NotificationIRPSystem.GetNotificationIRPVersion $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.GetNotificationIRPVersionHelper.write (out, $ex);
         }
         break;
       }


  /* ## Operation: get_subscription_status
      */
       case 8:  // NotificationIRPSystem/NotificationIRPOperations/get_subscription_status
       {
         try {
           String subscription_id = in.read_string ();
           org.omg.CORBA.StringHolder filter_in_effect = new org.omg.CORBA.StringHolder ();
           NotificationIRPConstDefs.SubscriptionStateHolder subscription_state = new NotificationIRPConstDefs.SubscriptionStateHolder ();
           org.omg.CORBA.IntHolder time_tick = new org.omg.CORBA.IntHolder ();
           String $result[] = null;
           $result = this.get_subscription_status (subscription_id, filter_in_effect, subscription_state, time_tick);
           out = $rh.createReply();
           NotificationIRPConstDefs.NotificationCategorySetHelper.write (out, $result);
           out.write_string (filter_in_effect.value);
           NotificationIRPConstDefs.SubscriptionStateHelper.write (out, subscription_state.value);
           out.write_long (time_tick.value);
         } catch (NotificationIRPSystem.GetSubscriptionStatus $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.GetSubscriptionStatusHelper.write (out, $ex);
         } catch (NotificationIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (NotificationIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /* ## Operation: get_subscription_ids
      */
       case 9:  // NotificationIRPSystem/NotificationIRPOperations/get_subscription_ids
       {
         try {
           org.omg.CORBA.Object manager_reference = org.omg.CORBA.ObjectHelper.read (in);
           String $result[] = null;
           $result = this.get_subscription_ids (manager_reference);
           out = $rh.createReply();
           NotificationIRPConstDefs.SubscriptionIdSetHelper.write (out, $result);
         } catch (NotificationIRPSystem.GetSubscriptionIds $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.GetSubscriptionIdsHelper.write (out, $ex);
         } catch (NotificationIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (NotificationIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /* ## Operation: change_subscription_filter
      */
       case 10:  // NotificationIRPSystem/NotificationIRPOperations/change_subscription_filter
       {
         try {
           String subscription_id = in.read_string ();
           String filter = in.read_string ();
           this.change_subscription_filter (subscription_id, filter);
           out = $rh.createReply();
         } catch (NotificationIRPSystem.ChangeSubscriptionFilter $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.ChangeSubscriptionFilterHelper.write (out, $ex);
         } catch (NotificationIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (NotificationIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /* ## Operation: get_notification_categories
      */
       case 11:  // NotificationIRPSystem/NotificationIRPOperations/get_notification_categories
       {
         try {
           NotificationIRPConstDefs.EventTypesSetHolder event_type_list = new NotificationIRPConstDefs.EventTypesSetHolder ();
           NotificationIRPConstDefs.ExtendedEventTypesSetHolder extended_event_type_list = new NotificationIRPConstDefs.ExtendedEventTypesSetHolder ();
           String $result[] = null;
           $result = this.get_notification_categories (event_type_list, extended_event_type_list);
           out = $rh.createReply();
           NotificationIRPConstDefs.NotificationCategorySetHelper.write (out, $result);
           NotificationIRPConstDefs.EventTypesSetHelper.write (out, event_type_list.value);
           NotificationIRPConstDefs.ExtendedEventTypesSetHelper.write (out, extended_event_type_list.value);
         } catch (NotificationIRPSystem.GetNotificationCategories $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.GetNotificationCategoriesHelper.write (out, $ex);
         } catch (NotificationIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           NotificationIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:CelloNotificationIRPExtension/NotificationIRPExtension:1.0", 
    "IDL:3gppsa5.org/NotificationIRPSystem/NotificationIRPOperations:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public NotificationIRPExtension _this() 
  {
    return NotificationIRPExtensionHelper.narrow(
    super._this_object());
  }

  public NotificationIRPExtension _this(org.omg.CORBA.ORB orb) 
  {
    return NotificationIRPExtensionHelper.narrow(
    super._this_object(orb));
  }


} // class NotificationIRPExtensionPOA
