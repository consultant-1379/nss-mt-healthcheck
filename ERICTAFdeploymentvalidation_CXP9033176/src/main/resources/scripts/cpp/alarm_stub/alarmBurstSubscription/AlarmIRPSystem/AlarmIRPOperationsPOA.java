package AlarmIRPSystem;


/**
* AlarmIRPSystem/AlarmIRPOperationsPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from AlarmIRPSystem_F.idl
* Wednesday, July 11, 2018 2:25:07 PM GMT+01:00
*/


/*
  This interface specifies all methods supported by System as
	specified in 3GPP AlarmIRP: CORBA Solution Set version 1:1.
  */
public abstract class AlarmIRPOperationsPOA extends org.omg.PortableServer.Servant
 implements AlarmIRPSystem.AlarmIRPOperationsOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("acknowledge_alarms", new java.lang.Integer (0));
    _methods.put ("unacknowledge_alarms", new java.lang.Integer (1));
    _methods.put ("get_alarm_list", new java.lang.Integer (2));
    _methods.put ("get_alarm_count", new java.lang.Integer (3));
    _methods.put ("get_alarm_IRP_version", new java.lang.Integer (4));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // AlarmIRPSystem/AlarmIRPOperations/acknowledge_alarms
       {
         try {
           String alarm_information_id_list[] = AlarmIRPConstDefs.AlarmInformationIdSeqHelper.read (in);
           String ack_user_id = in.read_string ();
           String ack_system_id = in.read_string ();
           AlarmIRPConstDefs.AlarmInformationIdSeqHolder bad_alarm_information_id_list = new AlarmIRPConstDefs.AlarmInformationIdSeqHolder ();
           CommonIRPConstDefs.Signal $result = null;
           $result = this.acknowledge_alarms (alarm_information_id_list, ack_user_id, ack_system_id, bad_alarm_information_id_list);
           out = $rh.createReply();
           CommonIRPConstDefs.SignalHelper.write (out, $result);
           AlarmIRPConstDefs.AlarmInformationIdSeqHelper.write (out, bad_alarm_information_id_list.value);
         } catch (AlarmIRPSystem.AcknowledgeAlarms $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.AcknowledgeAlarmsHelper.write (out, $ex);
         } catch (AlarmIRPSystem.ParameterNotSupported $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.ParameterNotSupportedHelper.write (out, $ex);
         } catch (AlarmIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // AlarmIRPSystem/AlarmIRPOperations/unacknowledge_alarms
       {
         try {
           String alarm_information_id_list[] = AlarmIRPConstDefs.AlarmInformationIdSeqHelper.read (in);
           String ack_user_id = in.read_string ();
           String ack_system_id = in.read_string ();
           AlarmIRPConstDefs.AlarmInformationIdSeqHolder bad_alarm_information_id_list = new AlarmIRPConstDefs.AlarmInformationIdSeqHolder ();
           CommonIRPConstDefs.Signal $result = null;
           $result = this.unacknowledge_alarms (alarm_information_id_list, ack_user_id, ack_system_id, bad_alarm_information_id_list);
           out = $rh.createReply();
           CommonIRPConstDefs.SignalHelper.write (out, $result);
           AlarmIRPConstDefs.AlarmInformationIdSeqHelper.write (out, bad_alarm_information_id_list.value);
         } catch (AlarmIRPSystem.UnacknowledgeAlarms $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.UnacknowledgeAlarmsHelper.write (out, $ex);
         } catch (AlarmIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (AlarmIRPSystem.ParameterNotSupported $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.ParameterNotSupportedHelper.write (out, $ex);
         } catch (AlarmIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /*
       This method returns Alarm Informations.
       If flag is TRUE, all returned Alarm Informations shall be
       in AlarmInformationSeq that contains 0,1 or more Alarm Informations.
       Output parameter iter shall be useless.
       If flag is FALSE, no Alarm Informations shall be in AlarmInformationSeq.
       IRPAgent needs to use iter to retrieve them.
       */
       case 2:  // AlarmIRPSystem/AlarmIRPOperations/get_alarm_list
       {
         try {
           String filter = in.read_string ();
           org.omg.CORBA.BooleanHolder flag = new org.omg.CORBA.BooleanHolder ();
           AlarmIRPSystem.AlarmInformationIteratorHolder iter = new AlarmIRPSystem.AlarmInformationIteratorHolder ();
           CosNotification.StructuredEvent $result[] = null;
           $result = this.get_alarm_list (filter, flag, iter);
           out = $rh.createReply();
           CosNotification.EventBatchHelper.write (out, $result);
           out.write_boolean (flag.value);
           AlarmIRPSystem.AlarmInformationIteratorHelper.write (out, iter.value);
         } catch (AlarmIRPSystem.GetAlarmList $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.GetAlarmListHelper.write (out, $ex);
         } catch (AlarmIRPSystem.ParameterNotSupported $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.ParameterNotSupportedHelper.write (out, $ex);
         } catch (AlarmIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // AlarmIRPSystem/AlarmIRPOperations/get_alarm_count
       {
         try {
           String filter = in.read_string ();
           org.omg.CORBA.IntHolder critical_count = new org.omg.CORBA.IntHolder ();
           org.omg.CORBA.IntHolder major_count = new org.omg.CORBA.IntHolder ();
           org.omg.CORBA.IntHolder minor_count = new org.omg.CORBA.IntHolder ();
           org.omg.CORBA.IntHolder warning_count = new org.omg.CORBA.IntHolder ();
           org.omg.CORBA.IntHolder indeterminate_count = new org.omg.CORBA.IntHolder ();
           org.omg.CORBA.IntHolder cleared_count = new org.omg.CORBA.IntHolder ();
           this.get_alarm_count (filter, critical_count, major_count, minor_count, warning_count, indeterminate_count, cleared_count);
           out = $rh.createReply();
           out.write_long (critical_count.value);
           out.write_long (major_count.value);
           out.write_long (minor_count.value);
           out.write_long (warning_count.value);
           out.write_long (indeterminate_count.value);
           out.write_long (cleared_count.value);
         } catch (AlarmIRPSystem.GetAlarmCount $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.GetAlarmCountHelper.write (out, $ex);
         } catch (AlarmIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (AlarmIRPSystem.ParameterNotSupported $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.ParameterNotSupportedHelper.write (out, $ex);
         } catch (AlarmIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // AlarmIRPSystem/AlarmIRPOperations/get_alarm_IRP_version
       {
         try {
           String $result[] = null;
           $result = this.get_alarm_IRP_version ();
           out = $rh.createReply();
           CommonIRPConstDefs.VersionNumberSetHelper.write (out, $result);
         } catch (AlarmIRPSystem.GetAlarmIRPVersion $ex) {
           out = $rh.createExceptionReply ();
           AlarmIRPSystem.GetAlarmIRPVersionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:3gppsa5.org/AlarmIRPSystem/AlarmIRPOperations:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public AlarmIRPOperations _this() 
  {
    return AlarmIRPOperationsHelper.narrow(
    super._this_object());
  }

  public AlarmIRPOperations _this(org.omg.CORBA.ORB orb) 
  {
    return AlarmIRPOperationsHelper.narrow(
    super._this_object(orb));
  }


} // class AlarmIRPOperationsPOA
