// just import standard stuff to write shorter names later
// java ERBSSubscriber -OBJInitialPort 56834 -OBJInitialHost <ne-ip> -sim <sim-name> -ne <ne-name>
import java.util.*;
import org.omg.CORBA.*;
import org.omg.CosNaming.*;
import java.io.*;

// import the generated code (from the previous step). This file should be in the same
// directory as the IDLs, otherwise won't found these packages.
import BasicConfig.*;
import Config.*;

public class ERBSSynchronizer {
    public static void main(String[] args) {
        try {
            // create the Orber
            ORB orb = ORB.init(args, new Properties());
            // resolve the NameService. Its parameters will be passed on the command line
            org.omg.CORBA.Object obj = orb.resolve_initial_references("NameService");
            NamingContextExt ncRef = NamingContextExtHelper.narrow(obj);

            // resolve the ConfigService object. It is registered in the NameService
            // under <reverse-simulation-name>/<ne-name>/CelloConfigurationService
            // use the nslist command (see above) to find out the name of the object
            // if you want an other service (e.g. NotificationService)
//            System.out.println(args[5] + "_netsimdir_zpalsri_home/" + args[7] + "/CelloConfigurationService");

      // Below commented code did not worked if the simulation name contained "."
          // As NameComponent has 2 parts - id , kind . They can be seperated by "." if we passing as string. Which caused the issue cannotproceed expection
          //org.omg.CORBA.Object ccs  = ncRef.resolve_str(args[5]+"_netsimdir_netsim/"+args[7]+"/CelloConfigurationService");

        String ne=args[7];
        String sim=args[5];
       NameComponent comp1 = new NameComponent(sim+"_netsimdir_netsim", "");
       NameComponent comp2 = new NameComponent(ne, "");
       NameComponent acctName = new NameComponent("CelloConfigurationService", "");
       NameComponent acctPath[] = { comp1, comp2, acctName };

        org.omg.CORBA.Object ccs = ncRef.resolve(acctPath);

            ConfigExtended.ConfigurationExtended conf = ConfigExtended.ConfigurationExtendedHelper.narrow(ccs);

	    
	    
	    /* Session Creation
	       ================
	       BasicConfig.BasicConfiguration sessObj = BasicConfig.BasicConfigurationHelper.narrow(ccs);
	       BasicConfig.Session sess = sessObj.create_session(args[5] + "/" + args[7],600);
	       sess.commit();*/
	    
	    /*MO Action (manualRestart action for ManagedElement MO)
	      ======================================================
	      CosNaming.NameComponent n1 = new CosNaming.NameComponent("ManagedElement=1","");
	      BasicConfig.MOidpair ref1 = new MOidpair();
	      ref1.name(new CosNaming.NameComponent[] {n1});
	      org.omg.CORBA.Any val = orb.create_any();
	      val.insert_long(0);
	      org.omg.CORBA.Any val1 = orb.create_any();
	      val1.insert_string("Strange");
	      BasicConfig.NameValue[] nv = {new BasicConfig.NameValue("restartRank", val),new BasicConfig.NameValue("restartInfo", val1)};
	      BasicConfig.NameValueSeqHolder nvs = new BasicConfig.NameValueSeqHolder (nv);
	      conf.action(ref1, "manualRestart", nvs, sess);*/
	    
            // Execute the CORBA call. In this case we're using `null` session
            ConfigExtended.MOInfo moinfo = conf.get_root_MO(null);
	    BasicConfig.Filter filter = new BasicConfig.Filter("", "");
	    int iter = conf.get_MO_containment("ManagedElement=1",-1,filter,null);
	    ConfigExtended.MOInfoSeqHolder mos = new ConfigExtended.MOInfoSeqHolder();
	    boolean isNextMO = conf.next_MO_info(iter, 10000, null, mos);
	    
	    // The MOs & their attrs that have to be fetched are present in files generated by the createJavaAttrBlocks_CPPsync.sh script.
	    // We have to parse the files, separate the MOs and their attr lists and input it to get_MO_attributes functions
	    int numOfFiles = new File("/netsim/inst/cppStub/" + args[5] +"/javaAttrLists/" + args[7]).list().length;
	    for (int nthFile = 0; nthFile < numOfFiles; nthFile++)
	    	{
	    	    BufferedReader br = new BufferedReader(new FileReader("/netsim/inst/cppStub/" + args[5] + "/javaAttrLists/" + args[7] + "/javaAttrListBlock_" + nthFile));
	    	    HashMap<String,String> map = new HashMap<String, String>();
	    	    String line = null;
	    	    int numLines = 0;
	    	    while((line=br.readLine())!=null)
	    		{
	    		    {
	    			numLines++;
	    			String linearr[] = line.split(":");
	    			map.put(linearr[0], linearr[1]);
	    		    }
	    		}
	    	    Set set = map.entrySet();
	    	    Iterator mapIter = set.iterator();
	    	    ConfigExtended.RequestedAttributes[] requestedAttrsObj = new ConfigExtended.RequestedAttributes[numLines];
	    	    int rqstdAttrObjIndex = 0;
	    	    while(mapIter.hasNext())
	    		{
	    		    Map.Entry mentry = (Map.Entry)mapIter.next();
	    		    java.lang.Object attrsObjectsArray[] = {mentry.getValue()};
	    		    String[] attrsString = Arrays.copyOf(attrsObjectsArray, attrsObjectsArray.length, String[].class);
	    		    String attrsArray[] = attrsString[0].split(",");
	    		    //java.lang.Object mo = mentry.getKey();
	    		    String mo = (mentry.getKey()).toString();
	    		    requestedAttrsObj[rqstdAttrObjIndex] = new ConfigExtended.RequestedAttributes(mo,attrsArray);
	    		    rqstdAttrObjIndex++;
	    		}
	    	    ConfigExtended.ReturnedAttributes[] retAttrs1 = conf.get_MO_attributes(requestedAttrsObj,null);
	    	}
	}
        catch (Exception e) {
            e.printStackTrace(System.out);
        }
    }
    
    
}
