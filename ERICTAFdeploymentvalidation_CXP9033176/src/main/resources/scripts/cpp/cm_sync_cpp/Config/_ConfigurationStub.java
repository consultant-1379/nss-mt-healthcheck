package Config;


/**
* Config/_ConfigurationStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from configuration_G.idl
* Friday, June 1, 2018 12:05:47 PM GMT+01:00
*/


/**
   * Configuration interface
   */
public class _ConfigurationStub extends org.omg.CORBA.portable.ObjectImpl implements Config.Configuration
{


  /**
       * Methods for configurations.
       */
  public Config.ConfigRef create_configuration (String name, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_configuration", true);
                Config.ConfigurationNameHelper.write ($out, name);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                Config.ConfigRef $result = Config.ConfigRefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return create_configuration (name, session        );
            } finally {
                _releaseReply ($in);
            }
  } // create_configuration

  public Config.ConfigRef copy_configuration (Config.ConfigRef baseConfiguration, String name, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("copy_configuration", true);
                Config.ConfigRefHelper.write ($out, baseConfiguration);
                Config.ConfigurationNameHelper.write ($out, name);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                Config.ConfigRef $result = Config.ConfigRefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return copy_configuration (baseConfiguration, name, session        );
            } finally {
                _releaseReply ($in);
            }
  } // copy_configuration

  public void delete_configuration (Config.ConfigRef configuration, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delete_configuration", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                delete_configuration (configuration, session        );
            } finally {
                _releaseReply ($in);
            }
  } // delete_configuration

  public Config.ConfigRef get_configuration (int id, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_configuration", true);
                Config.ConfigurationIdHelper.write ($out, id);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                Config.ConfigRef $result = Config.ConfigRefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_configuration (id, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_configuration

  public Config.ConfigRef get_valid_configuration (BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_valid_configuration", true);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                Config.ConfigRef $result = Config.ConfigRefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_valid_configuration (session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_valid_configuration

  public Config.ConfigRef[] get_configurations (boolean includeValid, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_configurations", true);
                $out.write_boolean (includeValid);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                Config.ConfigRef $result[] = Config.ConfigRefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_configurations (includeValid, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_configurations

  public Config.ConfigurationInfo get_configuration_info (Config.ConfigRef configuration, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_configuration_info", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                Config.ConfigurationInfo $result = Config.ConfigurationInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_configuration_info (configuration, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_configuration_info

  public void update (Config.ConfigRef configuration, BasicConfig.NameValue[] optionalArg, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("update", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.NameValueSeqHelper.write ($out, optionalArg);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                update (configuration, optionalArg, session        );
            } finally {
                _releaseReply ($in);
            }
  } // update


  /**
       * Methods for MOs
       */
  public BasicConfig.MOInfo get_MO_info (Config.ConfigRef configuration, BasicConfig.MOidpair mo, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MO_info", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MOInfo $result = BasicConfig.MOInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_MO_info (configuration, mo, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MO_info

  public BasicConfig.MORef get_MO_parent (Config.ConfigRef configuration, BasicConfig.MOidpair mo, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MO_parent", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MORef $result = BasicConfig.MORefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_MO_parent (configuration, mo, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MO_parent

  public void get_MO_attributes (Config.ConfigRef configuration, BasicConfig.MOidpair mo, String[] attributeNames, BasicConfig.NameValueSeqHolder attributes, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MO_attributes", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.AttributeNameSeqHelper.write ($out, attributeNames);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                attributes.value = BasicConfig.AttributeSeqHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                get_MO_attributes (configuration, mo, attributeNames, attributes, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MO_attributes

  public void set_MO_attributes (Config.ConfigRef configuration, BasicConfig.MOidpair mo, BasicConfig.NameValue[] attributes, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("set_MO_attributes", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.AttributeSeqHelper.write ($out, attributes);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                set_MO_attributes (configuration, mo, attributes, session        );
            } finally {
                _releaseReply ($in);
            }
  } // set_MO_attributes

  public BasicConfig.MORef create_MO (Config.ConfigRef configuration, String name, String type, BasicConfig.MOidpair baseMO, BasicConfig.MOidpair sourceMO, BasicConfig.NameValue[] attributes, BasicConfig.MOAssociation[] associations, BasicConfig.Session session) throws BasicConfig.AlreadyDefined, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_MO", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MONameHelper.write ($out, name);
                BasicConfig.MOTypeHelper.write ($out, type);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                BasicConfig.MOidpairHelper.write ($out, sourceMO);
                BasicConfig.AttributeSeqHelper.write ($out, attributes);
                BasicConfig.MOAssociationSeqHelper.write ($out, associations);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MORef $result = BasicConfig.MORefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/AlreadyDefined:1.0"))
                    throw BasicConfig.AlreadyDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return create_MO (configuration, name, type, baseMO, sourceMO, attributes, associations, session        );
            } finally {
                _releaseReply ($in);
            }
  } // create_MO

  public void delete_MO (Config.ConfigRef configuration, BasicConfig.MOidpair baseMO, BasicConfig.MGRef mg, int scope, BasicConfig.Filter filter, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delete_MO", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                delete_MO (configuration, baseMO, mg, scope, filter, session        );
            } finally {
                _releaseReply ($in);
            }
  } // delete_MO

  public BasicConfig.MORef create_root_MO (Config.ConfigRef configuration, String name, String type, BasicConfig.NameValue[] attributes, BasicConfig.MOAssociation[] associations, BasicConfig.MIBRef mib, BasicConfig.Session session) throws BasicConfig.ProcessingFailure, BasicConfig.SecurityViolation, BasicConfig.NotDefined, BasicConfig.AlreadyDefined
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_root_MO", true);
                Config.ConfigRefHelper.write ($out, configuration);
                $out.write_string (name);
                $out.write_string (type);
                BasicConfig.AttributeSeqHelper.write ($out, attributes);
                BasicConfig.MOAssociationSeqHelper.write ($out, associations);
                BasicConfig.MIBRefHelper.write ($out, mib);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MORef $result = BasicConfig.MORefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/AlreadyDefined:1.0"))
                    throw BasicConfig.AlreadyDefinedHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return create_root_MO (configuration, name, type, attributes, associations, mib, session        );
            } finally {
                _releaseReply ($in);
            }
  } // create_root_MO

  public BasicConfig.MORef get_root_MO (Config.ConfigRef configuration, BasicConfig.MIBRef mib, BasicConfig.Session session) throws BasicConfig.ProcessingFailure, BasicConfig.SecurityViolation, BasicConfig.NotDefined
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_root_MO", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MIBRefHelper.write ($out, mib);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MORef $result = BasicConfig.MORefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_root_MO (configuration, mib, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_root_MO

  public BasicConfig.IterRef set_MO (Config.ConfigRef configuration, BasicConfig.MOidpair baseMO, BasicConfig.MGRef mg, int scope, BasicConfig.Filter filter, BasicConfig.NameValue[] attributes, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("set_MO", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                BasicConfig.AttributeSeqHelper.write ($out, attributes);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.IterRef $result = BasicConfig.IterRefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return set_MO (configuration, baseMO, mg, scope, filter, attributes, session        );
            } finally {
                _releaseReply ($in);
            }
  } // set_MO

  public BasicConfig.IterRef get_MO_containment_short (Config.ConfigRef configuration, BasicConfig.MOidpair baseMO, BasicConfig.MGRef mg, int scope, BasicConfig.Filter filter, org.omg.CORBA.IntHolder count, BasicConfig.MORefSeqHolder result, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MO_containment_short", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                $out.write_ulong (count.value);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.IterRef $result = BasicConfig.IterRefHelper.read ($in);
                count.value = $in.read_ulong ();
                result.value = BasicConfig.MORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_MO_containment_short (configuration, baseMO, mg, scope, filter, count, result, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MO_containment_short

  public BasicConfig.ExtIterRef get_MO_containment_full (Config.ConfigRef configuration, BasicConfig.MOidpair baseMO, BasicConfig.MGRef mg, int scope, BasicConfig.Filter filter, org.omg.CORBA.IntHolder count, BasicConfig.ExtMORefSeqHolder result, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MO_containment_full", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                $out.write_ulong (count.value);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.ExtIterRef $result = BasicConfig.ExtIterRefHelper.read ($in);
                count.value = $in.read_ulong ();
                result.value = BasicConfig.ExtMORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_MO_containment_full (configuration, baseMO, mg, scope, filter, count, result, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MO_containment_full

  public BasicConfig.AttrIterRef get_attr_MO_containment (Config.ConfigRef configuration, BasicConfig.MOidpair baseMO, int scope, BasicConfig.Filter filter, String[] attributeNames, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_attr_MO_containment", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                BasicConfig.AttributeNameSeqHelper.write ($out, attributeNames);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.AttrIterRef $result = BasicConfig.AttrIterRefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_attr_MO_containment (configuration, baseMO, scope, filter, attributeNames, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_attr_MO_containment

  public BasicConfig.IterRef get_MO_association_short (Config.ConfigRef configuration, BasicConfig.MOidpair baseMO, String roleName, BasicConfig.MGRef mg, int scope, BasicConfig.Filter filter, org.omg.CORBA.IntHolder count, BasicConfig.MORefSeqHolder result, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MO_association_short", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                $out.write_string (roleName);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                $out.write_ulong (count.value);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.IterRef $result = BasicConfig.IterRefHelper.read ($in);
                count.value = $in.read_ulong ();
                result.value = BasicConfig.MORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_MO_association_short (configuration, baseMO, roleName, mg, scope, filter, count, result, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MO_association_short

  public BasicConfig.ExtIterRef get_MO_association_full (Config.ConfigRef configuration, BasicConfig.MOidpair baseMO, String roleName, BasicConfig.MGRef mg, int scope, BasicConfig.Filter filter, org.omg.CORBA.IntHolder count, BasicConfig.ExtMORefSeqHolder result, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MO_association_full", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                $out.write_string (roleName);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                $out.write_ulong (count.value);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.ExtIterRef $result = BasicConfig.ExtIterRefHelper.read ($in);
                count.value = $in.read_ulong ();
                result.value = BasicConfig.ExtMORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_MO_association_full (configuration, baseMO, roleName, mg, scope, filter, count, result, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MO_association_full

  public BasicConfig.AttrIterRef get_attr_MO_association (Config.ConfigRef configuration, BasicConfig.MOidpair baseMO, String roleName, int scope, BasicConfig.Filter filter, String[] attributeNames, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_attr_MO_association", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                $out.write_string (roleName);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                BasicConfig.AttributeNameSeqHelper.write ($out, attributeNames);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.AttrIterRef $result = BasicConfig.AttrIterRefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_attr_MO_association (configuration, baseMO, roleName, scope, filter, attributeNames, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_attr_MO_association

  public boolean is_existing (Config.ConfigRef configuration, BasicConfig.MOidpair mo, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("is_existing", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return is_existing (configuration, mo, session        );
            } finally {
                _releaseReply ($in);
            }
  } // is_existing

  public void create_association (Config.ConfigRef configuration, BasicConfig.MOidpair fromMO, BasicConfig.MOAssociation[] associations, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.AlreadyDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_association", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, fromMO);
                BasicConfig.MOAssociationSeqHelper.write ($out, associations);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/AlreadyDefined:1.0"))
                    throw BasicConfig.AlreadyDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                create_association (configuration, fromMO, associations, session        );
            } finally {
                _releaseReply ($in);
            }
  } // create_association

  public void delete_association (Config.ConfigRef configuration, BasicConfig.MOidpair fromMO, BasicConfig.MOAssociation[] associations, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delete_association", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, fromMO);
                BasicConfig.MOAssociationSeqHelper.write ($out, associations);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                delete_association (configuration, fromMO, associations, session        );
            } finally {
                _releaseReply ($in);
            }
  } // delete_association

  public void lock_MO (Config.ConfigRef configuration, BasicConfig.MOidpair mo, BasicConfig.MGRef mg, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.AlreadyDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("lock_MO", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/AlreadyDefined:1.0"))
                    throw BasicConfig.AlreadyDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                lock_MO (configuration, mo, mg, session        );
            } finally {
                _releaseReply ($in);
            }
  } // lock_MO

  public void unlock_MO (Config.ConfigRef configuration, BasicConfig.MOidpair mo, BasicConfig.MGRef mg, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unlock_MO", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                unlock_MO (configuration, mo, mg, session        );
            } finally {
                _releaseReply ($in);
            }
  } // unlock_MO

  public boolean is_locked_MO (Config.ConfigRef configuration, BasicConfig.MOidpair mo, BasicConfig.MGRef mg, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("is_locked_MO", true);
                Config.ConfigRefHelper.write ($out, configuration);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return is_locked_MO (configuration, mo, mg, session        );
            } finally {
                _releaseReply ($in);
            }
  } // is_locked_MO


  /**
       * Methods for Session
       */
  public BasicConfig.Session create_session (String id, int idleTimeout) throws BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_session", true);
                $out.write_string (id);
                BasicConfig.SessionTimeoutHelper.write ($out, idleTimeout);
                $in = _invoke ($out);
                BasicConfig.Session $result = BasicConfig.SessionHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return create_session (id, idleTimeout        );
            } finally {
                _releaseReply ($in);
            }
  } // create_session


  /**
       * Methods for MIB.
       */
  public BasicConfig.MIBRef create_MIB (String name, String type, String version, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_MIB", true);
                BasicConfig.MIBNameHelper.write ($out, name);
                BasicConfig.MIMNameHelper.write ($out, type);
                BasicConfig.MIMVersionHelper.write ($out, version);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MIBRef $result = BasicConfig.MIBRefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return create_MIB (name, type, version, session        );
            } finally {
                _releaseReply ($in);
            }
  } // create_MIB

  public void delete_MIB (BasicConfig.MIBRef mib, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delete_MIB", true);
                BasicConfig.MIBRefHelper.write ($out, mib);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                delete_MIB (mib, session        );
            } finally {
                _releaseReply ($in);
            }
  } // delete_MIB

  public BasicConfig.MIBRef get_MIB (String name, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MIB", true);
                BasicConfig.MIBNameHelper.write ($out, name);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MIBRef $result = BasicConfig.MIBRefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_MIB (name, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MIB

  public BasicConfig.MIBRef[] get_MIBs (BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MIBs", true);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MIBRef $result[] = BasicConfig.MIBRefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_MIBs (session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MIBs

  public BasicConfig.MORef basic_create_root_MO (String name, String type, BasicConfig.NameValue[] attributes, BasicConfig.MOAssociation[] associations, BasicConfig.MIBRef mib, BasicConfig.Session session) throws BasicConfig.ProcessingFailure, BasicConfig.SecurityViolation, BasicConfig.NotDefined, BasicConfig.AlreadyDefined
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_create_root_MO", true);
                $out.write_string (name);
                $out.write_string (type);
                BasicConfig.AttributeSeqHelper.write ($out, attributes);
                BasicConfig.MOAssociationSeqHelper.write ($out, associations);
                BasicConfig.MIBRefHelper.write ($out, mib);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MORef $result = BasicConfig.MORefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/AlreadyDefined:1.0"))
                    throw BasicConfig.AlreadyDefinedHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return basic_create_root_MO (name, type, attributes, associations, mib, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_create_root_MO

  public BasicConfig.MORef basic_get_root_MO (BasicConfig.MIBRef mib, BasicConfig.Session session) throws BasicConfig.ProcessingFailure, BasicConfig.SecurityViolation, BasicConfig.NotDefined
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_get_root_MO", true);
                BasicConfig.MIBRefHelper.write ($out, mib);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MORef $result = BasicConfig.MORefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return basic_get_root_MO (mib, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_get_root_MO

  public BasicConfig.MIBInfo get_MIB_info (BasicConfig.MIBRef mib, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MIB_info", true);
                BasicConfig.MIBRefHelper.write ($out, mib);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MIBInfo $result = BasicConfig.MIBInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_MIB_info (mib, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MIB_info

  public void set_MIM_version (BasicConfig.MIBRef mib, String version, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("set_MIM_version", true);
                BasicConfig.MIBRefHelper.write ($out, mib);
                BasicConfig.MIMVersionHelper.write ($out, version);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                set_MIM_version (mib, version, session        );
            } finally {
                _releaseReply ($in);
            }
  } // set_MIM_version

  public void set_prefix_MIB (BasicConfig.MIBRef mib, CosNaming.NameComponent[] prefix, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("set_prefix_MIB", true);
                BasicConfig.MIBRefHelper.write ($out, mib);
                BasicConfig.DNameHelper.write ($out, prefix);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                set_prefix_MIB (mib, prefix, session        );
            } finally {
                _releaseReply ($in);
            }
  } // set_prefix_MIB


  /**
       * Methods for Managed Group
       */
  public BasicConfig.MGRef create_MG (String name, BasicConfig.MORef[] mos, BasicConfig.Filter filter, int scope, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_MG", true);
                BasicConfig.MGNameHelper.write ($out, name);
                BasicConfig.MORefSeqHelper.write ($out, mos);
                BasicConfig.FilterHelper.write ($out, filter);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MGRef $result = BasicConfig.MGRefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return create_MG (name, mos, filter, scope, session        );
            } finally {
                _releaseReply ($in);
            }
  } // create_MG

  public void delete_MG (BasicConfig.MGRef mg, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delete_MG", true);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                delete_MG (mg, session        );
            } finally {
                _releaseReply ($in);
            }
  } // delete_MG

  public BasicConfig.MGRef[] get_MGs (BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MGs", true);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MGRef $result[] = BasicConfig.MGRefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_MGs (session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MGs

  public BasicConfig.MGRef get_MG (int id, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MG", true);
                BasicConfig.MGIDHelper.write ($out, id);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MGRef $result = BasicConfig.MGRefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_MG (id, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MG

  public BasicConfig.IterRef get_MG_contents_short (BasicConfig.MGRef mg, org.omg.CORBA.IntHolder count, BasicConfig.MORefSeqHolder result, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MG_contents_short", true);
                BasicConfig.MGRefHelper.write ($out, mg);
                $out.write_ulong (count.value);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.IterRef $result = BasicConfig.IterRefHelper.read ($in);
                count.value = $in.read_ulong ();
                result.value = BasicConfig.MORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_MG_contents_short (mg, count, result, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MG_contents_short

  public BasicConfig.ExtIterRef get_MG_contents_full (BasicConfig.MGRef mg, org.omg.CORBA.IntHolder count, BasicConfig.ExtMORefSeqHolder result, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MG_contents_full", true);
                BasicConfig.MGRefHelper.write ($out, mg);
                $out.write_ulong (count.value);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.ExtIterRef $result = BasicConfig.ExtIterRefHelper.read ($in);
                count.value = $in.read_ulong ();
                result.value = BasicConfig.ExtMORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_MG_contents_full (mg, count, result, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MG_contents_full

  public BasicConfig.MGInfo get_MG_info (BasicConfig.MGRef mg, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_MG_info", true);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MGInfo $result = BasicConfig.MGInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_MG_info (mg, session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_MG_info

  public void add_MO_to_MG (BasicConfig.MGRef mg, BasicConfig.MORef[] mos, BasicConfig.Filter filter, int scope, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("add_MO_to_MG", true);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.MORefSeqHelper.write ($out, mos);
                BasicConfig.FilterHelper.write ($out, filter);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                add_MO_to_MG (mg, mos, filter, scope, session        );
            } finally {
                _releaseReply ($in);
            }
  } // add_MO_to_MG

  public void remove_MO_from_MG (BasicConfig.MGRef mg, BasicConfig.MORef[] mos, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("remove_MO_from_MG", true);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.MORefSeqHelper.write ($out, mos);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                remove_MO_from_MG (mg, mos, session        );
            } finally {
                _releaseReply ($in);
            }
  } // remove_MO_from_MG


  /**
       * Methods for MOs
       */
  public BasicConfig.MORef basic_create_MO (String name, String type, BasicConfig.MOidpair baseMO, BasicConfig.MOidpair sourceMO, BasicConfig.NameValue[] attributes, BasicConfig.MOAssociation[] associations, BasicConfig.Session session) throws BasicConfig.AlreadyDefined, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_create_MO", true);
                BasicConfig.MONameHelper.write ($out, name);
                BasicConfig.MOTypeHelper.write ($out, type);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                BasicConfig.MOidpairHelper.write ($out, sourceMO);
                BasicConfig.AttributeSeqHelper.write ($out, attributes);
                BasicConfig.MOAssociationSeqHelper.write ($out, associations);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MORef $result = BasicConfig.MORefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/AlreadyDefined:1.0"))
                    throw BasicConfig.AlreadyDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return basic_create_MO (name, type, baseMO, sourceMO, attributes, associations, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_create_MO

  public void basic_delete_MO (BasicConfig.MOidpair baseMO, BasicConfig.MGRef mg, int scope, BasicConfig.Filter filter, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_delete_MO", true);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                basic_delete_MO (baseMO, mg, scope, filter, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_delete_MO

  public BasicConfig.IterRef basic_set_MO (BasicConfig.MOidpair baseMO, BasicConfig.MGRef mg, int scope, BasicConfig.Filter filter, BasicConfig.NameValue[] attributes, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_set_MO", true);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                BasicConfig.AttributeSeqHelper.write ($out, attributes);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.IterRef $result = BasicConfig.IterRefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return basic_set_MO (baseMO, mg, scope, filter, attributes, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_set_MO

  public BasicConfig.IterRef basic_get_MO_containment_short (BasicConfig.MOidpair baseMO, BasicConfig.MGRef mg, int scope, BasicConfig.Filter filter, org.omg.CORBA.IntHolder count, BasicConfig.MORefSeqHolder result, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_get_MO_containment_short", true);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                $out.write_ulong (count.value);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.IterRef $result = BasicConfig.IterRefHelper.read ($in);
                count.value = $in.read_ulong ();
                result.value = BasicConfig.MORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return basic_get_MO_containment_short (baseMO, mg, scope, filter, count, result, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_get_MO_containment_short

  public BasicConfig.ExtIterRef basic_get_MO_containment_full (BasicConfig.MOidpair baseMO, BasicConfig.MGRef mg, int scope, BasicConfig.Filter filter, org.omg.CORBA.IntHolder count, BasicConfig.ExtMORefSeqHolder result, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_get_MO_containment_full", true);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                $out.write_ulong (count.value);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.ExtIterRef $result = BasicConfig.ExtIterRefHelper.read ($in);
                count.value = $in.read_ulong ();
                result.value = BasicConfig.ExtMORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return basic_get_MO_containment_full (baseMO, mg, scope, filter, count, result, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_get_MO_containment_full

  public BasicConfig.AttrIterRef basic_get_attr_MO_containment (BasicConfig.MOidpair baseMO, int scope, BasicConfig.Filter filter, String[] attributeNames, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_get_attr_MO_containment", true);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                BasicConfig.AttributeNameSeqHelper.write ($out, attributeNames);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.AttrIterRef $result = BasicConfig.AttrIterRefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return basic_get_attr_MO_containment (baseMO, scope, filter, attributeNames, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_get_attr_MO_containment

  public BasicConfig.IterRef basic_get_MO_association_short (BasicConfig.MOidpair baseMO, String roleName, BasicConfig.MGRef mg, int scope, BasicConfig.Filter filter, org.omg.CORBA.IntHolder count, BasicConfig.MORefSeqHolder result, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_get_MO_association_short", true);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                $out.write_string (roleName);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                $out.write_ulong (count.value);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.IterRef $result = BasicConfig.IterRefHelper.read ($in);
                count.value = $in.read_ulong ();
                result.value = BasicConfig.MORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return basic_get_MO_association_short (baseMO, roleName, mg, scope, filter, count, result, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_get_MO_association_short

  public BasicConfig.ExtIterRef basic_get_MO_association_full (BasicConfig.MOidpair baseMO, String roleName, BasicConfig.MGRef mg, int scope, BasicConfig.Filter filter, org.omg.CORBA.IntHolder count, BasicConfig.ExtMORefSeqHolder result, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_get_MO_association_full", true);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                $out.write_string (roleName);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                $out.write_ulong (count.value);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.ExtIterRef $result = BasicConfig.ExtIterRefHelper.read ($in);
                count.value = $in.read_ulong ();
                result.value = BasicConfig.ExtMORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return basic_get_MO_association_full (baseMO, roleName, mg, scope, filter, count, result, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_get_MO_association_full

  public BasicConfig.AttrIterRef basic_get_attr_MO_association (BasicConfig.MOidpair baseMO, String roleName, int scope, BasicConfig.Filter filter, String[] attributeNames, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_get_attr_MO_association", true);
                BasicConfig.MOidpairHelper.write ($out, baseMO);
                $out.write_string (roleName);
                BasicConfig.ScopeHelper.write ($out, scope);
                BasicConfig.FilterHelper.write ($out, filter);
                BasicConfig.AttributeNameSeqHelper.write ($out, attributeNames);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.AttrIterRef $result = BasicConfig.AttrIterRefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return basic_get_attr_MO_association (baseMO, roleName, scope, filter, attributeNames, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_get_attr_MO_association

  public boolean basic_is_existing (BasicConfig.MOidpair mo, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_is_existing", true);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return basic_is_existing (mo, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_is_existing

  public void basic_create_association (BasicConfig.MOidpair fromMO, BasicConfig.MOAssociation[] associations, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.AlreadyDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_create_association", true);
                BasicConfig.MOidpairHelper.write ($out, fromMO);
                BasicConfig.MOAssociationSeqHelper.write ($out, associations);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/AlreadyDefined:1.0"))
                    throw BasicConfig.AlreadyDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                basic_create_association (fromMO, associations, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_create_association

  public void basic_delete_association (BasicConfig.MOidpair fromMO, BasicConfig.MOAssociation[] associations, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_delete_association", true);
                BasicConfig.MOidpairHelper.write ($out, fromMO);
                BasicConfig.MOAssociationSeqHelper.write ($out, associations);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                basic_delete_association (fromMO, associations, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_delete_association

  public void basic_lock_MO (BasicConfig.MOidpair mo, BasicConfig.MGRef mg, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.AlreadyDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_lock_MO", true);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/AlreadyDefined:1.0"))
                    throw BasicConfig.AlreadyDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                basic_lock_MO (mo, mg, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_lock_MO

  public void basic_unlock_MO (BasicConfig.MOidpair mo, BasicConfig.MGRef mg, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_unlock_MO", true);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                basic_unlock_MO (mo, mg, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_unlock_MO

  public boolean basic_is_locked_MO (BasicConfig.MOidpair mo, BasicConfig.MGRef mg, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_is_locked_MO", true);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.MGRefHelper.write ($out, mg);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return basic_is_locked_MO (mo, mg, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_is_locked_MO


  /**
       * Methods on a MO
       */
  public BasicConfig.MOInfo basic_get_MO_info (BasicConfig.MOidpair mo, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_get_MO_info", true);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MOInfo $result = BasicConfig.MOInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return basic_get_MO_info (mo, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_get_MO_info

  public BasicConfig.MORef basic_get_MO_parent (BasicConfig.MOidpair mo, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_get_MO_parent", true);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                BasicConfig.MORef $result = BasicConfig.MORefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return basic_get_MO_parent (mo, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_get_MO_parent

  public void basic_get_MO_attributes (BasicConfig.MOidpair mo, String[] attributeNames, BasicConfig.NameValueSeqHolder attributes, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_get_MO_attributes", true);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.AttributeNameSeqHelper.write ($out, attributeNames);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                attributes.value = BasicConfig.AttributeSeqHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                basic_get_MO_attributes (mo, attributeNames, attributes, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_get_MO_attributes

  public void basic_set_MO_attributes (BasicConfig.MOidpair mo, BasicConfig.NameValue[] attributes, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("basic_set_MO_attributes", true);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.AttributeSeqHelper.write ($out, attributes);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                basic_set_MO_attributes (mo, attributes, session        );
            } finally {
                _releaseReply ($in);
            }
  } // basic_set_MO_attributes

  public org.omg.CORBA.Any action (BasicConfig.MOidpair mo, String name, BasicConfig.NameValueSeqHolder parameters, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("action", true);
                BasicConfig.MOidpairHelper.write ($out, mo);
                BasicConfig.ActionNameHelper.write ($out, name);
                BasicConfig.ParameterSeqHelper.write ($out, parameters.value);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                org.omg.CORBA.Any $result = $in.read_any ();
                parameters.value = BasicConfig.ParameterSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return action (mo, name, parameters, session        );
            } finally {
                _releaseReply ($in);
            }
  } // action

  public BasicConfig.ManagedObject convert_MO (BasicConfig.MOidpair mo) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("convert_MO", true);
                BasicConfig.MOidpairHelper.write ($out, mo);
                $in = _invoke ($out);
                BasicConfig.ManagedObject $result = BasicConfig.ManagedObjectHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return convert_MO (mo        );
            } finally {
                _releaseReply ($in);
            }
  } // convert_MO

  public BasicConfig.ManagedObject[] convert_MOs (BasicConfig.MOidpair[] mos) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("convert_MOs", true);
                BasicConfig.MOidpairSeqHelper.write ($out, mos);
                $in = _invoke ($out);
                BasicConfig.ManagedObject $result[] = BasicConfig.ManagedObjectSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return convert_MOs (mos        );
            } finally {
                _releaseReply ($in);
            }
  } // convert_MOs


  /**
       * Methods for the iterator.
       */
  public boolean next_MO (BasicConfig.IterRef iterator, BasicConfig.MORefHolder mo, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("next_MO", true);
                BasicConfig.IterRefHelper.write ($out, iterator);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                mo.value = BasicConfig.MORefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return next_MO (iterator, mo, session        );
            } finally {
                _releaseReply ($in);
            }
  } // next_MO

  public boolean next_MOs (BasicConfig.IterRef iterator, int howMany, BasicConfig.MORefSeqHolder mos, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("next_MOs", true);
                BasicConfig.IterRefHelper.write ($out, iterator);
                $out.write_ulong (howMany);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                mos.value = BasicConfig.MORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return next_MOs (iterator, howMany, mos, session        );
            } finally {
                _releaseReply ($in);
            }
  } // next_MOs

  public boolean all_MOs (BasicConfig.IterRef iterator, BasicConfig.MORefSeqHolder mos, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("all_MOs", true);
                BasicConfig.IterRefHelper.write ($out, iterator);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                mos.value = BasicConfig.MORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return all_MOs (iterator, mos, session        );
            } finally {
                _releaseReply ($in);
            }
  } // all_MOs

  public void delete_Iter (BasicConfig.IterRef iterator, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delete_Iter", true);
                BasicConfig.IterRefHelper.write ($out, iterator);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                delete_Iter (iterator, session        );
            } finally {
                _releaseReply ($in);
            }
  } // delete_Iter


  /**
       * Methods for the extended iterator.
       */
  public boolean ext_next_MO (BasicConfig.ExtIterRef iterator, BasicConfig.ExtMORefHolder mo, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ext_next_MO", true);
                BasicConfig.ExtIterRefHelper.write ($out, iterator);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                mo.value = BasicConfig.ExtMORefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return ext_next_MO (iterator, mo, session        );
            } finally {
                _releaseReply ($in);
            }
  } // ext_next_MO

  public boolean ext_next_MOs (BasicConfig.ExtIterRef iterator, int howMany, BasicConfig.ExtMORefSeqHolder mos, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ext_next_MOs", true);
                BasicConfig.ExtIterRefHelper.write ($out, iterator);
                $out.write_ulong (howMany);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                mos.value = BasicConfig.ExtMORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return ext_next_MOs (iterator, howMany, mos, session        );
            } finally {
                _releaseReply ($in);
            }
  } // ext_next_MOs

  public boolean ext_all_MOs (BasicConfig.ExtIterRef iterator, BasicConfig.ExtMORefSeqHolder mos, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ext_all_MOs", true);
                BasicConfig.ExtIterRefHelper.write ($out, iterator);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                mos.value = BasicConfig.ExtMORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return ext_all_MOs (iterator, mos, session        );
            } finally {
                _releaseReply ($in);
            }
  } // ext_all_MOs

  public void ext_delete_Iter (BasicConfig.ExtIterRef iterator, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ext_delete_Iter", true);
                BasicConfig.ExtIterRefHelper.write ($out, iterator);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                ext_delete_Iter (iterator, session        );
            } finally {
                _releaseReply ($in);
            }
  } // ext_delete_Iter


  /**
       * Methods for the attribute iterator.
       */
  public boolean attr_next_MO (BasicConfig.AttrIterRef iterator, BasicConfig.AttrMORefHolder mo, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("attr_next_MO", true);
                BasicConfig.AttrIterRefHelper.write ($out, iterator);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                mo.value = BasicConfig.AttrMORefHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return attr_next_MO (iterator, mo, session        );
            } finally {
                _releaseReply ($in);
            }
  } // attr_next_MO

  public boolean attr_next_MOs (BasicConfig.AttrIterRef iterator, int howMany, BasicConfig.AttrMORefSeqHolder mos, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("attr_next_MOs", true);
                BasicConfig.AttrIterRefHelper.write ($out, iterator);
                $out.write_ulong (howMany);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                mos.value = BasicConfig.AttrMORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return attr_next_MOs (iterator, howMany, mos, session        );
            } finally {
                _releaseReply ($in);
            }
  } // attr_next_MOs

  public boolean attr_all_MOs (BasicConfig.AttrIterRef iterator, BasicConfig.AttrMORefSeqHolder mos, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("attr_all_MOs", true);
                BasicConfig.AttrIterRefHelper.write ($out, iterator);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                mos.value = BasicConfig.AttrMORefSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return attr_all_MOs (iterator, mos, session        );
            } finally {
                _releaseReply ($in);
            }
  } // attr_all_MOs

  public void attr_delete_Iter (BasicConfig.AttrIterRef iterator, BasicConfig.Session session) throws BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("attr_delete_Iter", true);
                BasicConfig.AttrIterRefHelper.write ($out, iterator);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                attr_delete_Iter (iterator, session        );
            } finally {
                _releaseReply ($in);
            }
  } // attr_delete_Iter


  /**
       * QoS
       */
  public short[] get_QoS (BasicConfig.Session session)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_QoS", true);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                short $result[] = BasicConfig.QoSListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_QoS (session        );
            } finally {
                _releaseReply ($in);
            }
  } // get_QoS

  public short[] set_QoS (short[] newQoS, BasicConfig.Session session) throws BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("set_QoS", true);
                BasicConfig.QoSListHelper.write ($out, newQoS);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                short $result[] = BasicConfig.QoSListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return set_QoS (newQoS, session        );
            } finally {
                _releaseReply ($in);
            }
  } // set_QoS

  public short[] supported_QoS (BasicConfig.Session session) throws BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("supported_QoS", true);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                short $result[] = BasicConfig.QoSListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return supported_QoS (session        );
            } finally {
                _releaseReply ($in);
            }
  } // supported_QoS


  /**
       * Hoppers and Soft Links
       */
  public void create_hopper (BasicConfig.MOidpair sourceMO, CosNaming.NameComponent[] targetMO, String targetMIB, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.AlreadyDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_hopper", true);
                BasicConfig.MOidpairHelper.write ($out, sourceMO);
                BasicConfig.DNameHelper.write ($out, targetMO);
                BasicConfig.MIBNameHelper.write ($out, targetMIB);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/AlreadyDefined:1.0"))
                    throw BasicConfig.AlreadyDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                create_hopper (sourceMO, targetMO, targetMIB, session        );
            } finally {
                _releaseReply ($in);
            }
  } // create_hopper

  public void delete_hopper (BasicConfig.MOidpair sourceMO, BasicConfig.MOidpair targetMO, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delete_hopper", true);
                BasicConfig.MOidpairHelper.write ($out, sourceMO);
                BasicConfig.MOidpairHelper.write ($out, targetMO);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                delete_hopper (sourceMO, targetMO, session        );
            } finally {
                _releaseReply ($in);
            }
  } // delete_hopper

  public void create_association_hopper (BasicConfig.MOidpair sourceMO, CosNaming.NameComponent[] targetMO, String targetMIB, String roleName, String relName, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.AlreadyDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_association_hopper", true);
                BasicConfig.MOidpairHelper.write ($out, sourceMO);
                BasicConfig.DNameHelper.write ($out, targetMO);
                BasicConfig.MIBNameHelper.write ($out, targetMIB);
                $out.write_string (roleName);
                $out.write_string (relName);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/AlreadyDefined:1.0"))
                    throw BasicConfig.AlreadyDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                create_association_hopper (sourceMO, targetMO, targetMIB, roleName, relName, session        );
            } finally {
                _releaseReply ($in);
            }
  } // create_association_hopper

  public void delete_association_hopper (BasicConfig.MOidpair sourceMO, BasicConfig.MOidpair targetMO, String roleName, String relName, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delete_association_hopper", true);
                BasicConfig.MOidpairHelper.write ($out, sourceMO);
                BasicConfig.MOidpairHelper.write ($out, targetMO);
                $out.write_string (roleName);
                $out.write_string (relName);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                delete_association_hopper (sourceMO, targetMO, roleName, relName, session        );
            } finally {
                _releaseReply ($in);
            }
  } // delete_association_hopper

  public void create_softlink (BasicConfig.MOidpair sourceMO, CosNaming.NameComponent[] targetMO, String targetMIB, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.AlreadyDefined, BasicConfig.NotAccepted, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_softlink", true);
                BasicConfig.MOidpairHelper.write ($out, sourceMO);
                BasicConfig.DNameHelper.write ($out, targetMO);
                BasicConfig.MIBNameHelper.write ($out, targetMIB);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/AlreadyDefined:1.0"))
                    throw BasicConfig.AlreadyDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotAccepted:1.0"))
                    throw BasicConfig.NotAcceptedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                create_softlink (sourceMO, targetMO, targetMIB, session        );
            } finally {
                _releaseReply ($in);
            }
  } // create_softlink

  public void delete_softlink (BasicConfig.MOidpair sourceMO, BasicConfig.MOidpair targetMO, BasicConfig.Session session) throws BasicConfig.UnsupportedQoS, BasicConfig.NotDefined, BasicConfig.SecurityViolation, BasicConfig.ProcessingFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delete_softlink", true);
                BasicConfig.MOidpairHelper.write ($out, sourceMO);
                BasicConfig.MOidpairHelper.write ($out, targetMO);
                BasicConfig.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:BasicConfig/UnsupportedQoS:1.0"))
                    throw BasicConfig.UnsupportedQoSHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/NotDefined:1.0"))
                    throw BasicConfig.NotDefinedHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/SecurityViolation:1.0"))
                    throw BasicConfig.SecurityViolationHelper.read ($in);
                else if (_id.equals ("IDL:BasicConfig/ProcessingFailure:1.0"))
                    throw BasicConfig.ProcessingFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                delete_softlink (sourceMO, targetMO, session        );
            } finally {
                _releaseReply ($in);
            }
  } // delete_softlink

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Config/Configuration:1.0", 
    "IDL:BasicConfig/BasicConfiguration:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _ConfigurationStub
