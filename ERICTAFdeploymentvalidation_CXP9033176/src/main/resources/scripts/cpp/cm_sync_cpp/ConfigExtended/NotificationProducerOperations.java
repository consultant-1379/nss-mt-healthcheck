package ConfigExtended;


/**
* ConfigExtended/NotificationProducerOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from configuration_ext_G.idl
* Friday, June 1, 2018 12:05:52 PM GMT+01:00
*/

public interface NotificationProducerOperations 
{

  /** Operation: subscribe
         *  Documentation:
         *      Actor invokes this operation to establish a
         *      subscription to receive configuration events. How
         *      the Actor discovers the System's address or reference
         *      (so that Actor can invoke this operation) is outside
         *      the scope of this file.  
         *
         *      Parameters:
         *      (in) actorReference: It carries the Actor's IOR
         *      towards which the System pushes notifications.
         *
         *      (in) filter: It specifies a filter constraint that
         *      the System will use to filter configuration events.
         *      The System will only notify the Actors if the event
         *      satisfies the filter constraint. 
         *
         *      (in) timeTick: It specifies the value of a timer
         *      held by the System for the subject actor. This
         *      value defines a time interval within which the Actor
         *      intends to invoke the get_subscription_status
         *      operation. The System will reset the timer, with
         *      timeTick when it receives the get_subscription_status
         *      operation from the subject Actor. If the timer
         *      expires, the System may delete its resources
         *      allocated to the Actor and consider the Actor as if
         *      it had invoked the unsubscribe operation. In such case,
         *      the Actor will not receive further Notifications.
         *      The Actor will need to invoke the subscribe
         *      operation again.
         *
         *      (out) subscriptionId: It carries the System
         *      assigned identifiers unique to each subscription.
         */
  void subscribe (ConfigExtended.NotificationConsumer actorReference, ConfigExtended.NotificationProducerPackage.NotificationFilter filter, int timeTick, org.omg.CORBA.IntHolder subscriptionId) throws ConfigExtended.NotificationProducerPackage.InvalidFilterConstraintsException;

  /** Operation: unsubscribe
         *  Documentation:
         *      Actor invokes this operation to cancel
         *      subscription.  Actor must use the same subscription
         *      Id returned by System for subscribe() and subscribe_
         *      b() operations.  This operation is mandatory.
         *      
         *      Parameters:      
         *      (in) subscriptionId: It carries the System assigned
         *      identifiers unique to each subscription. A unique
         *      subscriptionId is dependent on both the category
         *      and the actorReference.
         */
  void unsubscribe (int subscriptionId);

  /** Operation: get_subscription_status
         * Documentation:
         *      The Actor invokes this operation to verify if the
         *      System has lost the Actor's reference and as a
         *      consequence, the System is not able to send
         *      information specified under Notification
         *      IRPNotifications to the Actor. This operation is
         *      mandatory.
         *
         *      Parameters:
         *      (in) subscriptionId: It carries the System assigned
         *      identifiers unique to each subscription.
         *
         *      (return): boolean set to true if the subscription still
         *      is active. 
         */
  boolean get_subscription_status (int subscriptionId);

  /** Operation: get_generation_count
         *  Documentation:
         *      The Actor invokes this operation to verify if 
         *      any reconfigurations are missed when the actor has been 
         *      restarted or the contact to the NE has been lost.. 
         *
         *      Parameters:
         *      (in) subscriptionId: It carries the System assigned
         *      identifiers unique to each subscription.
         */
  int get_generation_count ();

  /** Operation: disable_notifications_for_transaction
         *  Documentation:
         *      The Actor invokes this operation to cancel the  
         *      subscription resulting from one transaction. 
         *
         *      Parameters:
         *      (in) subscriptionId: The subscription ID for the subscription
         *      to disable notifications from. 
         *      (in) session: The session which contains the transaction
         *      to disable notifications from. 
         */
  void disable_notifications_for_transaction (int subscriptionId, BasicConfig.Session session) throws ConfigExtended.NotificationProducerPackage.NoTransactionException;
} // interface NotificationProducerOperations
