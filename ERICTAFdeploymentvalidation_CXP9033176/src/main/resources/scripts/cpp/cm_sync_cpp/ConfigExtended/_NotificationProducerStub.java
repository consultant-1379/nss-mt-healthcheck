package ConfigExtended;


/**
* ConfigExtended/_NotificationProducerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from configuration_ext_G.idl
* Friday, June 1, 2018 12:05:52 PM GMT+01:00
*/

public class _NotificationProducerStub extends org.omg.CORBA.portable.ObjectImpl implements ConfigExtended.NotificationProducer
{


  /** Operation: subscribe
         *  Documentation:
         *      Actor invokes this operation to establish a
         *      subscription to receive configuration events. How
         *      the Actor discovers the System's address or reference
         *      (so that Actor can invoke this operation) is outside
         *      the scope of this file.  
         *
         *      Parameters:
         *      (in) actorReference: It carries the Actor's IOR
         *      towards which the System pushes notifications.
         *
         *      (in) filter: It specifies a filter constraint that
         *      the System will use to filter configuration events.
         *      The System will only notify the Actors if the event
         *      satisfies the filter constraint. 
         *
         *      (in) timeTick: It specifies the value of a timer
         *      held by the System for the subject actor. This
         *      value defines a time interval within which the Actor
         *      intends to invoke the get_subscription_status
         *      operation. The System will reset the timer, with
         *      timeTick when it receives the get_subscription_status
         *      operation from the subject Actor. If the timer
         *      expires, the System may delete its resources
         *      allocated to the Actor and consider the Actor as if
         *      it had invoked the unsubscribe operation. In such case,
         *      the Actor will not receive further Notifications.
         *      The Actor will need to invoke the subscribe
         *      operation again.
         *
         *      (out) subscriptionId: It carries the System
         *      assigned identifiers unique to each subscription.
         */
  public void subscribe (ConfigExtended.NotificationConsumer actorReference, ConfigExtended.NotificationProducerPackage.NotificationFilter filter, int timeTick, org.omg.CORBA.IntHolder subscriptionId) throws ConfigExtended.NotificationProducerPackage.InvalidFilterConstraintsException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("subscribe", true);
                ConfigExtended.NotificationConsumerHelper.write ($out, actorReference);
                ConfigExtended.NotificationProducerPackage.NotificationFilterHelper.write ($out, filter);
                $out.write_long (timeTick);
                $in = _invoke ($out);
                subscriptionId.value = ConfigExtended.NotificationProducerPackage.SubscriptionIdHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ConfigExtended/NotificationProducer/InvalidFilterConstraintsException:1.0"))
                    throw ConfigExtended.NotificationProducerPackage.InvalidFilterConstraintsExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                subscribe (actorReference, filter, timeTick, subscriptionId        );
            } finally {
                _releaseReply ($in);
            }
  } // subscribe


  /** Operation: unsubscribe
         *  Documentation:
         *      Actor invokes this operation to cancel
         *      subscription.  Actor must use the same subscription
         *      Id returned by System for subscribe() and subscribe_
         *      b() operations.  This operation is mandatory.
         *      
         *      Parameters:      
         *      (in) subscriptionId: It carries the System assigned
         *      identifiers unique to each subscription. A unique
         *      subscriptionId is dependent on both the category
         *      and the actorReference.
         */
  public void unsubscribe (int subscriptionId)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unsubscribe", true);
                ConfigExtended.NotificationProducerPackage.SubscriptionIdHelper.write ($out, subscriptionId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                unsubscribe (subscriptionId        );
            } finally {
                _releaseReply ($in);
            }
  } // unsubscribe


  /** Operation: get_subscription_status
         * Documentation:
         *      The Actor invokes this operation to verify if the
         *      System has lost the Actor's reference and as a
         *      consequence, the System is not able to send
         *      information specified under Notification
         *      IRPNotifications to the Actor. This operation is
         *      mandatory.
         *
         *      Parameters:
         *      (in) subscriptionId: It carries the System assigned
         *      identifiers unique to each subscription.
         *
         *      (return): boolean set to true if the subscription still
         *      is active. 
         */
  public boolean get_subscription_status (int subscriptionId)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_subscription_status", true);
                ConfigExtended.NotificationProducerPackage.SubscriptionIdHelper.write ($out, subscriptionId);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_subscription_status (subscriptionId        );
            } finally {
                _releaseReply ($in);
            }
  } // get_subscription_status


  /** Operation: get_generation_count
         *  Documentation:
         *      The Actor invokes this operation to verify if 
         *      any reconfigurations are missed when the actor has been 
         *      restarted or the contact to the NE has been lost.. 
         *
         *      Parameters:
         *      (in) subscriptionId: It carries the System assigned
         *      identifiers unique to each subscription.
         */
  public int get_generation_count ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_generation_count", true);
                $in = _invoke ($out);
                int $result = ConfigExtended.GenerationCountTypeHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_generation_count (        );
            } finally {
                _releaseReply ($in);
            }
  } // get_generation_count


  /** Operation: disable_notifications_for_transaction
         *  Documentation:
         *      The Actor invokes this operation to cancel the  
         *      subscription resulting from one transaction. 
         *
         *      Parameters:
         *      (in) subscriptionId: The subscription ID for the subscription
         *      to disable notifications from. 
         *      (in) session: The session which contains the transaction
         *      to disable notifications from. 
         */
  public void disable_notifications_for_transaction (int subscriptionId, BasicConfig.Session session) throws ConfigExtended.NotificationProducerPackage.NoTransactionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("disable_notifications_for_transaction", true);
                ConfigExtended.NotificationProducerPackage.SubscriptionIdHelper.write ($out, subscriptionId);
                ConfigExtended.SessionHelper.write ($out, session);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ConfigExtended/NotificationProducer/NoTransactionException:1.0"))
                    throw ConfigExtended.NotificationProducerPackage.NoTransactionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                disable_notifications_for_transaction (subscriptionId, session        );
            } finally {
                _releaseReply ($in);
            }
  } // disable_notifications_for_transaction

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ConfigExtended/NotificationProducer:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _NotificationProducerStub
