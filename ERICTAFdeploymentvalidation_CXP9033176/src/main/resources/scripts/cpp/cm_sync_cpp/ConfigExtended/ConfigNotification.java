package ConfigExtended;


/**
* ConfigExtended/ConfigNotification.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from configuration_ext_G.idl
* Friday, June 1, 2018 12:05:52 PM GMT+01:00
*/

public final class ConfigNotification implements org.omg.CORBA.portable.IDLEntity
{
  private ConfigExtended.TopologyNotification ___createdMO;
  private ConfigExtended.TopologyNotification ___deletedMO;
  private ConfigExtended.AVCNotification ___updatedMO;
  private ConfigExtended.OverflowNotification ___overflow;
  private ConfigExtended.NotificationKind __discriminator;
  private boolean __uninitialized = true;

  public ConfigNotification ()
  {
  }

  public ConfigExtended.NotificationKind discriminator ()
  {
    if (__uninitialized)
      throw new org.omg.CORBA.BAD_OPERATION ();
    return __discriminator;
  }

  public ConfigExtended.TopologyNotification createdMO ()
  {
    if (__uninitialized)
      throw new org.omg.CORBA.BAD_OPERATION ();
    verifycreatedMO (__discriminator);
    return ___createdMO;
  }

  public void createdMO (ConfigExtended.TopologyNotification value)
  {
    __discriminator = ConfigExtended.NotificationKind.MOCreatedType;
    ___createdMO = value;
    __uninitialized = false;
  }

  public void createdMO (ConfigExtended.NotificationKind discriminator, ConfigExtended.TopologyNotification value)
  {
    verifycreatedMO (discriminator);
    __discriminator = discriminator;
    ___createdMO = value;
    __uninitialized = false;
  }

  private void verifycreatedMO (ConfigExtended.NotificationKind discriminator)
  {
    if (discriminator != ConfigExtended.NotificationKind.MOCreatedType)
      throw new org.omg.CORBA.BAD_OPERATION ();
  }

  public ConfigExtended.TopologyNotification deletedMO ()
  {
    if (__uninitialized)
      throw new org.omg.CORBA.BAD_OPERATION ();
    verifydeletedMO (__discriminator);
    return ___deletedMO;
  }

  public void deletedMO (ConfigExtended.TopologyNotification value)
  {
    __discriminator = ConfigExtended.NotificationKind.MODeletedType;
    ___deletedMO = value;
    __uninitialized = false;
  }

  public void deletedMO (ConfigExtended.NotificationKind discriminator, ConfigExtended.TopologyNotification value)
  {
    verifydeletedMO (discriminator);
    __discriminator = discriminator;
    ___deletedMO = value;
    __uninitialized = false;
  }

  private void verifydeletedMO (ConfigExtended.NotificationKind discriminator)
  {
    if (discriminator != ConfigExtended.NotificationKind.MODeletedType)
      throw new org.omg.CORBA.BAD_OPERATION ();
  }

  public ConfigExtended.AVCNotification updatedMO ()
  {
    if (__uninitialized)
      throw new org.omg.CORBA.BAD_OPERATION ();
    verifyupdatedMO (__discriminator);
    return ___updatedMO;
  }

  public void updatedMO (ConfigExtended.AVCNotification value)
  {
    __discriminator = ConfigExtended.NotificationKind.AVCType;
    ___updatedMO = value;
    __uninitialized = false;
  }

  public void updatedMO (ConfigExtended.NotificationKind discriminator, ConfigExtended.AVCNotification value)
  {
    verifyupdatedMO (discriminator);
    __discriminator = discriminator;
    ___updatedMO = value;
    __uninitialized = false;
  }

  private void verifyupdatedMO (ConfigExtended.NotificationKind discriminator)
  {
    if (discriminator != ConfigExtended.NotificationKind.AVCType)
      throw new org.omg.CORBA.BAD_OPERATION ();
  }

  public ConfigExtended.OverflowNotification overflow ()
  {
    if (__uninitialized)
      throw new org.omg.CORBA.BAD_OPERATION ();
    verifyoverflow (__discriminator);
    return ___overflow;
  }

  public void overflow (ConfigExtended.OverflowNotification value)
  {
    __discriminator = ConfigExtended.NotificationKind.OverflowType;
    ___overflow = value;
    __uninitialized = false;
  }

  public void overflow (ConfigExtended.NotificationKind discriminator, ConfigExtended.OverflowNotification value)
  {
    verifyoverflow (discriminator);
    __discriminator = discriminator;
    ___overflow = value;
    __uninitialized = false;
  }

  private void verifyoverflow (ConfigExtended.NotificationKind discriminator)
  {
    if (discriminator != ConfigExtended.NotificationKind.OverflowType)
      throw new org.omg.CORBA.BAD_OPERATION ();
  }

} // class ConfigNotification
